#! /usr/bin/env julia

using soapysdr_jll

using Clang
using Clang.Generators

using JuliaFormatter

function rewriter!(ctx, options)
    for node in get_nodes(ctx.dag)
        if Generators.is_function(node) && !Generators.is_variadic_function(node)
            expr = node.exprs[1]
            fn = String(expr.args[1].args[1])
            ccall_expr = expr.args[2].args[1]   # assumes `use_ccall_macro` is false

            if startswith(fn, "SoapySDRDevice") &&
               !in(fn, ["SoapySDRDevice_lastStatus", "SoapySDRDevice_lastError"])
                # insert `@soapy_checked` before each function with a `ccall`
                expr.args[2].args[1] = Expr(:macrocall, Symbol("@soapy_checked"), nothing, ccall_expr)
            end
        end
    end
end

function main()
    include_dir = joinpath(soapysdr_jll.artifact_dir, "include") |> normpath
    clang_dir = joinpath(include_dir, "clang-c")

    options = load_options(joinpath(@__DIR__, "generator.toml"))

    # add compiler flags, e.g. "-DXXXXXXXXX"
    args = get_default_args()
    push!(args, "-I$include_dir")

    headers = [
        joinpath(include_dir, "SoapySDR", header) for
        header in readdir(joinpath(include_dir, "SoapySDR")) if endswith(header, ".h")
    ]
    filter!(s -> basename(s) âˆ‰ ["Config.h"], headers)

    # create context
    ctx = create_context(headers, args, options)

    # run generator
    build!(ctx, BUILDSTAGE_NO_PRINTING)
    rewriter!(ctx, options)
    build!(ctx, BUILDSTAGE_PRINTING_ONLY)

    output_file = options["general"]["output_file_path"]

    # prepend "autogenerated, do not edit!" comment
    output_data = read(output_file, String)
    open(output_file, "w") do io
        println(io, """# This file is automatically generated. Do not edit!
                       # To re-generate, execute gen/gen.jl""")
        println(io)
        print(io, output_data)
    end

    format_file(output_file)
end

isinteractive() || main()

var documenterSearchIndex = {"docs":
[{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"highlevel/#SoapySDR-High-Level-API","page":"High Level API","title":"SoapySDR High Level API","text":"","category":"section"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"Modules = [SoapySDR]\nPages = [\"highlevel.jl\"]","category":"page"},{"location":"highlevel/#SoapySDR.Device","page":"High Level API","title":"SoapySDR.Device","text":"Device\n\nA device is a collection of SDR channels, obtained from the Devices() list.\n\nFields:\n\ninfo\ndriver\nhardware\nhardwareinfo\ntx\nrx\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.Devices","page":"High Level API","title":"SoapySDR.Devices","text":"Devices()\n\nEnumerates all detectable SDR devices on the system. Indexing into this list return a Device struct.\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.SampleBuffer","page":"High Level API","title":"SoapySDR.SampleBuffer","text":"SampleBuffer(s::SoapySDR.Stream)\nSampleBuffer(s::SoapySDR.Stream, n::Int)\n\nConstructs a sample buffer for a given stream. Can contain multiple channels and be of arbitrary length. To avoid undefined behavior, this requested length with be aligned to the device MTU. It is therefore important to ensure that subsequent calls and calculations use this length.\n\nReturns a SampleBuffer{N,T} with fields:     bufs::NTuple{N, T}     packet_count::Int     timens::Vector{Pair{Int,typeof(1u\"ns\")}}\n\nwhere N is the number of channels and T is the vector type of the buffer (default: Vector).\n\nbufs are the buffers for each channel. length length of the buffer. packet_count are the number of transactions of MTU size required by subsequent read and write operations. timens are the offset and time stamp pairs for each packet.\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#Base.read!-Union{Tuple{VT}, Tuple{T}, Tuple{N}, Tuple{SoapySDR.Stream{T}, SoapySDR.SampleBuffer{N, VT}}} where {N, T, VT<:AbstractVector{T}}","page":"High Level API","title":"Base.read!","text":"read!(s::SoapySDR.Stream, buf::SampleBuffer; timeout::Int)\n\nRead data from the device into the given buffer.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.get_hardware_time-Tuple{SoapySDR.Device, String}","page":"High Level API","title":"SoapySDR.get_hardware_time","text":"get_hardware_time(::Device, what::String)\n\nGet hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.get_sensor_info-Tuple{SoapySDR.Device, Any}","page":"High Level API","title":"SoapySDR.get_sensor_info","text":"get_sensor_info(::Device, ::String)\n\nRead the sensor extracted from list_sensors.  Returns: the value as a string. Note: Appropriate conversions need to be done by the user.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.get_time_source-Tuple{SoapySDR.Device}","page":"High Level API","title":"SoapySDR.get_time_source","text":"get_time_source(::Device)\n\nSet the time source used by the Device.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.has_hardware_time-Tuple{SoapySDR.Device, String}","page":"High Level API","title":"SoapySDR.has_hardware_time","text":"has_hardware_time(::Device, what::String)\n\nQuery if the Device has hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.list_sample_rates-Tuple{SoapySDR.Channel}","page":"High Level API","title":"SoapySDR.list_sample_rates","text":"list_sample_rates(::Channel)\n\nList the natively supported sample rates for a given channel.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.list_sensors-Tuple{SoapySDR.Device}","page":"High Level API","title":"SoapySDR.list_sensors","text":"list_sensors(::Device)\n\nList the available sensors on a device. Returns: an array of sensor names.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.list_time_sources-Tuple{SoapySDR.Device}","page":"High Level API","title":"SoapySDR.list_time_sources","text":"list_time_sources(::Device)\n\nList time sources available on the device\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.native_stream_format-Tuple{SoapySDR.Channel}","page":"High Level API","title":"SoapySDR.native_stream_format","text":"native_stream_format(c::Channel) -> Type, fullscale\n\nReturns the format type and fullscale resolution of the native stream.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.read_sensor-Tuple{SoapySDR.Device, Any}","page":"High Level API","title":"SoapySDR.read_sensor","text":"read_sensor(::Device, ::String)\n\nRead the sensor extracted from list_sensors.  Returns: the value as a string. Note: Appropriate conversions need to be done by the user.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.set_hardware_time-Tuple{SoapySDR.Device, Int64, String}","page":"High Level API","title":"SoapySDR.set_hardware_time","text":"has_hardware_time(::Device, timeNs::Int64 what::String)\n\nSet hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.set_time_source!-Tuple{SoapySDR.Device, String}","page":"High Level API","title":"SoapySDR.set_time_source!","text":"set_time_source!(::Device, source::String)\n\nList the current time source used by the Device.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.stream_formats-Tuple{SoapySDR.Channel}","page":"High Level API","title":"SoapySDR.stream_formats","text":"stream_formats(::Channel)\n\nReturns the stream formats supported by the device. \n\nNote: Since Julia is a multiple dispatch and generic language, it is preferrable to use native_stream_format(c::Channel) for optimal processing throughput. Only use this function if non-standard formats such as Complex Int12 and Complex Int4 are native to the device and not handled by dispatch on Complex.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"lowlevel/#SoapySDR-Low-Level-API","page":"Low Level API","title":"SoapySDR Low Level API","text":"","category":"section"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"warning: Warning\nThis documentation is part of the lowlevel libsoapysdr interface. For end-users, the high-level Julia APIs are preferred","category":"page"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"Modules = [SoapySDR]\nPages = [\"lowlevel/Constants.jl\",\n         \"lowlevel/Device.jl\",\n         \"lowlevel/Errors.jl\",\n         \"lowlevel/Formats.jl\",\n         \"lowlevel/Types.jl\"]","category":"page"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_END_ABRUPT","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_END_ABRUPT","text":"Indicates that stream terminated prematurely. This is the flag version of an overflow error that indicates an overflow with the end samples.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_END_BURST","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_END_BURST","text":"Indicate end of burst for transmit or receive. For write, end of burst if set by the caller. For read, end of burst is set by the driver.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_HAS_TIME","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_HAS_TIME","text":"Indicates that the time stamp is valid. For write, the caller must set has time when timeNs is provided. For read, the driver sets has time when timeNs is provided.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_MORE_FRAGMENTS","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_MORE_FRAGMENTS","text":"Indicate that this read call and the next results in a fragment. Used when the implementation has an underlying packet interface. The caller can use this indicator and the SOAPYSDRONE_PACKET flag on subsequent read stream calls to re-align with packet boundaries.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_ONE_PACKET","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_ONE_PACKET","text":"Indicates transmit or receive only a single packet. Applicable when the driver fragments samples into packets. For write, the user sets this flag to only send a single packet. For read, the user sets this flag to only receive a single packet.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_WAIT_TRIGGER","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_WAIT_TRIGGER","text":"Indicate that the stream should wait for an external trigger event. This flag might be used with the flags argument in any of the stream API calls. The trigger implementation is hardware-specific.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.Direction","page":"Low Level API","title":"SoapySDR.Direction","text":"SOAPYSDRTX SOAPYSDRRX\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_activateStream-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_activateStream","text":"Activate a stream. Call activate to prepare a stream before using read/write(). The implementation control switches or stimulate data flow.\n\nThe timeNs is only valid when the flags have SOAPYSDRHASTIME. The numElems count can be used to request a finite burst size. The SOAPYSDRENDBURST flag can signal end on the finite burst. Not all implementations will support the full range of options. In this case, the implementation returns SOAPYSDRNOT_SUPPORTED.\n\nparam device a pointer to a device instance param stream the opaque pointer to a stream handle param flags optional flag indicators about the stream param timeNs optional activation time in nanoseconds param numElems optional element count for burst control return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_closeStream-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_closeStream","text":"Close an open stream created by setupStream param device a pointer to a device instance param stream the opaque pointer to a stream handle return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_deactivateStream-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_deactivateStream","text":"Deactivate a stream. Call deactivate when not using using read/write(). The implementation control switches or halt data flow.\n\nThe timeNs is only valid when the flags have SOAPYSDRHASTIME. Not all implementations will support the full range of options. In this case, the implementation returns SOAPYSDRNOTSUPPORTED.\n\nparam device a pointer to a device instance param stream the opaque pointer to a stream handle param flags optional flag indicators about the stream param timeNs optional deactivation time in nanoseconds return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_enumerate-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_enumerate","text":"Enumerate a list of available devices on the system. param args device construction key/value argument filters param [out] length the number of elements in the result. return a list of arguments strings, each unique to a device\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_enumerateStrArgs-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_enumerateStrArgs","text":"Enumerate a list of available devices on the system. Markup format for args: \"keyA=valA, keyB=valB\". param args a markup string of key/value argument filters param [out] length the number of elements in the result. return a list of arguments strings, each unique to a device\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelInfo-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelInfo","text":"SoapySDRDevice_getChannelInfo(device, direction, channel)\n\nGet channel info given the streaming direction\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns channel information\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelSensorInfo-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelSensorInfo","text":"Get meta-information about a channel sensor. Example: displayable name, type, range.\n\nparam device a pointer to a device instance param direction the channel direction RX or TX param channel an available channel on the device param key the ID name of an available sensor return meta-information about a sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getClockSource-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getClockSource","text":"Get the clock source of the device\n\nparam device a pointer to a device instance return the name of a clock source\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getDriverKey-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getDriverKey","text":"A key that uniquely identifies the device driver. This key identifies the underlying implementation. Serveral variants of a product may share a driver. param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRange","text":"Get the range of overall frequency values.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of frequency ranges in Hz\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRangeComponent-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRangeComponent","text":"Get the range of tunable values for the specified element.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of frequency ranges in Hz\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainElementRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainElementRange","text":"SoapySDRDevice_getGainElementRange(device, direction, channel, name)\n\nGet the range of possible gain values for a specific element.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\nname the name of an amplification element\n\nReturns the range of possible gain values for the specified amplification element in dB\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainRange","text":"Get the overall range of possible gain values\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns the range of possible gain values for this channel in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareInfo-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareInfo","text":"Query a dictionary of available device information. This dictionary can any number of values like vendor name, product name, revisions, serials... This information can be displayed to the user to help identify the instantiated device.\n\nparam device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareKey-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareKey","text":"A key that uniquely identifies the hardware. This key should be meaningful to the user to optimize for the underlying hardware. param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareTime-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareTime","text":"Read the time from the hardware clock on the device. The what argument can refer to a specific time counter.\n\nparam device a pointer to a device instance param what optional argument return the time in nanoseconds\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getMasterClockRate-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getMasterClockRate","text":"Get the master clock rate of the device.\n\nparam device a pointer to a device instance return the clock rate in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getMasterClockRates-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getMasterClockRates","text":"Get the range of available master clock rates.\n\nparam device a pointer to a device instance param [out] length the number of ranges return a list of clock rate ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNativeStreamFormat-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNativeStreamFormat","text":"Get the hardware's native stream format for this channel. This is the format used by the underlying transport layer, and the direct buffer access API calls (when available).\n\nparam device a pointer to a device instance param direction the channel direction RX or TX param channel an available channel on the device param [out] fullScale the maximum possible value return the native stream buffer format string\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNumChannels-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNumChannels","text":"Get a number of channels given the streaming direction param device a pointer to a device instance param direction the channel direction RX or TX return the number of channels\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getReferenceClockRate-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getReferenceClockRate","text":"Get the reference clock rate of the device.\n\nparam device a pointer to a device instance return the clock rate in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getReferenceClockRates-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getReferenceClockRates","text":"Get the range of available reference clock rates.\n\nparam device a pointer to a device instance\n\nreturn a list of clock rate ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSampleRateRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSampleRateRange","text":"Get the range of possible baseband sample rates.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of samples rates in samples per second\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSensorInfo-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSensorInfo","text":"Get meta-information about a sensor. Example: displayable name, type, range.\n\nparam device a pointer to a device instance param key the ID name of an available sensor return meta-information about a sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamFormats-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamFormats","text":"Query a list of the available stream formats.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of allowed format strings.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamMTU-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamMTU","text":"Get the stream's maximum transmission unit (MTU) in number of elements. The MTU specifies the maximum payload transfer in a stream operation. This value can be used as a stream buffer allocation size that can best optimize throughput given the underlying stream implementation.\n\nparam device a pointer to a device instance param stream the opaque pointer to a stream handle return the MTU in number of stream elements (never zero)\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getTimeSource-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getTimeSource","text":"Get the time source of the device\n\nparam device a pointer to a device instance return the name of a time source\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasHardwareTime-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasHardwareTime","text":"Does this device have a hardware clock?\n\nparam device a pointer to a device instance param what optional argument return true if the hardware clock exists\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_lastError-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_lastError","text":"Get the last error message after a device call fails. When an device API call throws, the C bindings catch the exception, store its message in thread-safe storage, and return a non-zero status code to indicate failure. Use lastError() to access the exception's error message.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_lastStatus-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_lastStatus","text":"SoapySDRDevice_lastStatus()\n\nGet the last status code after a Device API call. The status code is cleared on entry to each Device call. When an device API call throws, the C bindings catch the exception, and set a non-zero last status code. Use lastStatus() to determine success/failure for Device calls without integer status return codes.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listAntennas-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listAntennas","text":"Get a list of available antennas to select on a given chain.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nreturns a list of available antenna names\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listChannelSensors-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listChannelSensors","text":"List the available channel readback sensors. A sensor can represent a reference lock, RSSI, temperature.\n\nparam device a pointer to a device instance param direction the channel direction RX or TX param channel an available channel on the device\n\nreturn a list of available sensor string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listClockSources-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listClockSources","text":"Get the list of available clock sources.\n\nparam device a pointer to a device instance\n\nreturn a list of clock source names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listFrequencies-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listFrequencies","text":"List available tunable elements in the chain. Elements should be in order RF to baseband.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of tunable elements by name\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n*/\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listGains-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listGains","text":"List available amplification elements. Elements should be in order RF to baseband. param: device a pointer to a device instance param: direction the channel direction RX or TX param: channel an available channel param: [out] length the number of gain names\n\nreturn a list of gain string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listSampleRates-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listSampleRates","text":"Get the list of possible baseband sample rates.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of samples rates in samples per second\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listSensors-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listSensors","text":"List the available global readback sensors. A sensor can represent a reference lock, RSSI, temperature.\n\nparam device a pointer to a device instance param [out] length the number of sensor names return a list of available sensor string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listTimeSources-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listTimeSources","text":"Get the list of available time sources.\n\nparam device a pointer to a device instance param [out] length the number of sources return a list of time source names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make","text":"SoapySDRDevice_make(args)\n\nMake a new Device object given device construction args. The device pointer will be stored in a table so subsequent calls with the same arguments will produce the same device. For every call to make, there should be a matched call to unmake. param args device construction key/value argument map return a pointer to a new Device object.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_makeStrArgs-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_makeStrArgs","text":"Make a new Device object given device construction args. The device pointer will be stored in a table so subsequent calls with the same arguments will produce the same device. For every call to make, there should be a matched call to unmake.\n\nparam args a markup string of key/value arguments return a pointer to a new Device object or null for error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make_list-Tuple{Any, Int32}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make_list","text":"Create a list of devices from a list of construction arguments. This is a convenience call to parallelize device construction, and is fundamentally a parallel for loop of make(Kwargs). param argsList a list of device arguments per each device param length the length of the argsList array return a list of device pointers per each specified argument\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readChannelSensor-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readChannelSensor","text":"Readback a channel sensor given the name. The value returned is a string which can represent a boolean (\"true\"/\"false\"), an integer, or float.\n\nparam device a pointer to a device instance param direction the channel direction RX or TX param channel an available channel on the device param key the ID name of an available sensor return the current value of the sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readSensor-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readSensor","text":"Readback a global sensor given the name. The value returned is a string which can represent a boolean (\"true\"/\"false\"), an integer, or float.\n\nparam device a pointer to a device instance param key the ID name of an available sensor return the current value of the sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readStream-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readStream","text":"Read elements from a stream for reception. This is a multi-channel call, and buffs should be an array of void *, where each pointer will be filled with data from a different channel.\n\nClient code compatibility: The readStream() call should be well defined at all times, including prior to activation and after deactivation. When inactive, readStream() should implement the timeout specified by the caller and return SOAPYSDRTIMEOUT.\n\nparam device a pointer to a device instance param stream the opaque pointer to a stream handle param buffs an array of void* buffers num chans in size param numElems the number of elements in each buffer param [out] flags optional flag indicators about the result param [out] timeNs the buffer's timestamp in nanoseconds param timeoutUs the timeout in microseconds return the number of elements read per buffer or error code\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readStreamStatus-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readStreamStatus","text":"Readback status information about a stream. This call is typically used on a transmit stream to report time errors, underflows, and burst completion.\n\nClient code compatibility: Client code may continually poll readStreamStatus() in a loop. Implementations of readStreamStatus() should wait in the call for a status change event or until the timeout expiration. When stream status is not implemented on a particular stream, readStreamStatus() should return SOAPYSDRNOT_SUPPORTED. Client code may use this indication to disable a polling loop.\n\nparam device a pointer to a device instance param stream the opaque pointer to a stream handle param chanMask to which channels this status applies param flags optional input flags and output flags param timeNs the buffer's timestamp in nanoseconds param timeoutUs the timeout in microseconds return 0 for success or error code like timeout\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setClockSource-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setClockSource","text":"Set the clock source on the device\n\nparam device a pointer to a device instance param source the name of a clock source return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setFrequency-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setFrequency","text":"Set the center frequency of the chain.\n\nFor RX, this specifies the down-conversion frequency.\nFor TX, this specifies the up-conversion frequency.\n\nThe default implementation of setFrequency() will tune the \"RF\" component as close as possible to the requested center frequency. Tuning inaccuracies will be compensated for with the \"BB\" component. The args can be used to augment the tuning algorithm.\n\nUse \"OFFSET\" to specify an \"RF\" tuning offset, usually with the intention of moving the LO out of the passband. The offset will be compensated for using the \"BB\" component.\nUse the name of a component for the key and a frequency in Hz as the value (any format) to enforce a specific frequency. The other components will be tuned with compensation to achieve the specified overall frequency.\nUse the name of a component for the key and the value \"IGNORE\" so that the tuning algorithm will avoid altering the component.\nVendor specific implementations can also use the same args to augment tuning in other ways such as specifying fractional vs integer N tuning.\n\nparam device a pointer to a device instance param direction the channel direction RX or TX param channel an available channel on the device param frequency the center frequency in Hz param args optional tuner arguments return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setHardwareTime-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setHardwareTime","text":"Write the time to the hardware clock on the device. The what argument can refer to a specific time counter.\n\nparam device a pointer to a device instance param timeNs time in nanoseconds param what optional argument return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setMasterClockRate-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setMasterClockRate","text":"Set the master clock rate of the device.\n\nparam device a pointer to a device instance param rate the clock rate in Hz return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setReferenceClockRate-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setReferenceClockRate","text":"Set the reference clock rate of the device.\n\nparam device a pointer to a device instance param rate the clock rate in Hz return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setTimeSource-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setTimeSource","text":"Set the time source on the device\n\nparam device a pointer to a device instance param source the name of a time source return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setupStream-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setupStream","text":"Initialize a stream given a list of channels and stream arguments. The implementation may change switches or power-up components. All stream API calls should be usable with the new stream object after setupStream() is complete, regardless of the activity state.\n\nThe API allows any number of simultaneous TX and RX streams, but many dual-channel devices are limited to one stream in each direction, using either one or both channels. This call will return an error if an unsupported combination is requested, or if a requested channel in this direction is already in use by another stream.\n\nWhen multiple channels are added to a stream, they are typically expected to have the same sample rate. See SoapySDRDevice_setSampleRate().\n\ndevice a pointer to a device instance\ndirection the channel direction (SOAPY_SDR_RX or SOAPY_SDR_TX)\nformat A string representing the desired buffer format in read/writeStream()\n\nThe first character selects the number type:\n\n\"C\" means complex\n\"F\" means floating point\n\"S\" means signed integer\n\"U\" means unsigned integer\n\nThe type character is followed by the number of bits per number (complex is 2x this size per sample)\n\nExample format strings:\n\n\"CF32\" -  complex float32 (8 bytes per element)\n\"CS16\" -  complex int16 (4 bytes per element)\n\"CS12\" -  complex int12 (3 bytes per element)\n\"CS4\" -  complex int4 (1 byte per element)\n\"S32\" -  int32 (4 bytes per element)\n\"U8\" -  uint8 (1 byte per element)\nchannels a list of channels or empty for automatic\nnumChans the number of elements in the channels array\nargs stream args or empty for defaults\n\nRecommended keys to use in the args dictionary:     - \"WIRE\" - format of the samples between device and host\n\nReturns the opaque pointer to a stream handle.\n\nNOTE:\n\nThe returned stream is not required to have internal locking, and may not be used\nconcurrently from multiple threads.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_unmake_list-Tuple{Any, Int32}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_unmake_list","text":"Unmake or release a list of device handles and free the devices array memory as well. This is a convenience call to parallelize device destruction, and is fundamentally a parallel for loop of unmake(Device *). param devices a list of pointers to device objects param length the length of the devices array return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeStream-NTuple{7, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeStream","text":"Write elements to a stream for transmission. This is a multi-channel call, and buffs should be an array of void *, where each pointer will be filled with data for a different channel.\n\nClient code compatibility: Client code relies on writeStream() for proper back-pressure. The writeStream() implementation must enforce the timeout such that the call blocks until space becomes available or timeout expiration.\n\ndevice a pointer to a device instance\nstream the opaque pointer to a stream handle\nbuffs an array of void* buffers num chans in size\nnumElems the number of elements in each buffer\nflags optional input flags and output flags\ntimeNs the buffer's timestamp in nanoseconds\ntimeoutUs the timeout in microseconds\n\nReturns the number of elements written per buffer, output flags\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CORRUPTION","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CORRUPTION","text":"Returned when read has data corruption. For example, the driver saw a malformed packet.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_NOT_SUPPORTED","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_NOT_SUPPORTED","text":"Returned when a requested operation or flag setting is not supported by the underlying implementation.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_OVERFLOW","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_OVERFLOW","text":"Returned when read has an overflow condition. For example, and internal buffer has filled.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_STREAM_ERROR","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_STREAM_ERROR","text":"Returned for non-specific stream errors.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_TIMEOUT","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_TIMEOUT","text":"Returned when read has a timeout.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_TIME_ERROR","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_TIME_ERROR","text":"Returned when a the device encountered a stream time which was expired (late) or too early to process.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_UNDERFLOW","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_UNDERFLOW","text":"Returned when write caused an underflow condition. For example, a continuous stream was interrupted.\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SoapySDR_errToStr-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_errToStr","text":"Convert a error code to a string for printing purposes. If the error code is unrecognized, errToStr returns \"UNKNOWN\". param errorCode a negative integer return code return a pointer to a string representing the error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CF32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CF32","text":"Complex 32-bit floats (complex float)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CF64","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CF64","text":"Complex 64-bit floats (complex double)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CS12","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CS12","text":"Complex signed 12-bit integers (3 bytes)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CS16","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CS16","text":"Complex signed 16-bit integers (complex int16)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CS32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CS32","text":"Complex signed 32-bit integers (complex int32)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CS4","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CS4","text":"Complex signed 4-bit integers (1 byte)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CS8","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CS8","text":"Complex signed 8-bit integers (complex int8)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CU12","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CU12","text":"Complex unsigned 12-bit integers (3 bytes)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CU16","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CU16","text":"Complex unsigned 16-bit integers (complex uint16)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CU32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CU32","text":"Complex unsigned 32-bit integers (complex uint32)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CU4","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CU4","text":"Complex unsigned 4-bit integers (1 byte)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_CU8","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_CU8","text":"Complex unsigned 8-bit integers (complex uint8)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_F32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_F32","text":"Real 32-bit floats (float)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_F64","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_F64","text":"Real 64-bit floats (double)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_S16","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_S16","text":"Real signed 16-bit integers (int16)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_S32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_S32","text":"Real signed 32-bit integers (int32)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_S8","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_S8","text":"Real signed 8-bit integers (int8)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_U16","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_U16","text":"Real unsigned 16-bit integers (uint16)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_U32","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_U32","text":"Real unsigned 32-bit integers (uint32)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SOAPY_SDR_U8","page":"Low Level API","title":"SoapySDR.SOAPY_SDR_U8","text":"Real unsigned 8-bit integers (uint8)\n\n\n\n\n\n","category":"constant"},{"location":"lowlevel/#SoapySDR.SoapySDR_formatToSize-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_formatToSize","text":"Get the size of a single element in the specified format. param format a supported format string return the size of an element in bytes\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfoList_clear-Tuple{Any, Int32}","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfoList_clear","text":"Clear a list of argument info structures. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfo_clear-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfo_clear","text":"Clear the contents of a argument info structure. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargsList_clear-Tuple{Any, Integer}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargsList_clear","text":"Clear a list of kwargs structures. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_clear-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_clear","text":"Clear the contents of a kwargs structure. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_fromString-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_fromString","text":"Convert a markup string to a key-value map. The markup format is: \"key0=value0, key1=value1\"\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_get-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_get","text":"Get a value given a key in a kwargs structure. return the string or NULL if not found\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_set-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_set","text":"Set a key/value pair in a kwargs structure. If the key exists, the existing entry will be modified; otherwise a new entry will be appended to args. On error, the elements of args will not be modified, and args is guaranteed to be in a good state. return 0 for success, otherwise allocation error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_toString-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_toString","text":"Convert a key-value map to a markup string. The markup format is: \"key0=value0, key1=value1\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoapySDR","category":"page"},{"location":"#SoapySDR","page":"Home","title":"SoapySDR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoapySDR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a Julia wrapper for the SoapySDR C++ library.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Loading-a-Driver-Module","page":"Home","title":"Loading a Driver Module","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below is a list of driver modules that may be installed with the Julia package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device Julia Package\nxrtx xtrx_jll\nRTL-SDR SoapyRTLSDR_jll\nLimeSDR SoapyLMS7_jll\nUSRP SoapyUHD_jll","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need a driver module that is not listed, you can search JuliaHub to see if it may have been added to the package manager. If not, please file an issue.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To activate the driver and module, simply use the package along with SoapySDR. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using SoapySDR, xtrx_jll","category":"page"},{"location":"","page":"Home","title":"Home","text":"or:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using SoapySDR, SoapyRTLSDR_jll","category":"page"},{"location":"#Transmitting-and-Receiving","page":"Home","title":"Transmitting and Receiving","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Open all TX-capable channels on first device\ntx_channels = Devices()[1].tx\n\n# Open all RX-capable channels on first device\nrx_channels = Devices()[1].rx\n\n# Configure a TX channel with appropriate parameters\n# configure the RX channel with similar for e.g. a loopback test\n# Be sure to check your local regulations before transmitting!\ntx_channel[1].bandwidth = 800u\"kHz\"\ntx_channel[1].frequency = 30u\"MHz\"\ntx_channel[1].gain = 42u\"dB\"\ntx_channel[1].sample_rate = 2.1u\"MHz\"\n\n# Open a (potentially multichannel) stream on the channels\ntx_stream = SoapySDR.Stream(tx_channels)\nrx_stream = SoapySDR.Stream(rx_channels)\n\n# Setup a sample buffer optimized for the device\n# The data can be access with e.g. tx_buf.bufs\n# Note: we ask for 10,000 samples, but the API will re-size correctly for the device\ntx_buf = SoapySDR.SampleBuffer(tx_stream, 10_000)\nrx_buf = SoapySDR.SampleBuffer(rx_stream, 10_000)\n\n# Setup some data to transmit on each channel\nfor i in eachindex(tx_buf)\n    tx_buf[i] = randn(SoapySDR.streamtype(tx_stream), length(tx_buf))\nend\n\n# Spawn two tasks for full duplex operation\n# The tasks will run in parallel and for best resuslts run julia with --threads=auto\nread_task = Threads.@spawn read!(rx_stream, rx_buf)\nwrite_task = Threads.@spawn write(tx_stream, tx_buf)\n\n# Wait for the tasks to complete\nwait(read_task)\nwait(write_task)\n\n@show rx_buf[1][1:100] # show the first 100 samples of the first buffer","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\nYou have to load a driver for your particular SDR in order to work with SoapySDR. Available modules through the Julia Package manager are listed on the index.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The entry point of this package is the Devices() object, which will list all devices known to SoapySDR on the current system. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will use XTRX:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using SoapySDR, xtrx_jll\n\njulia> Devices()\n[1] :addr => \"pcie:///dev/xtrx0\", :dev => \"pcie:///dev/xtrx0\", :driver => \"xtrx\", :label => \"XTRX: pcie:///dev/xtrx0 (10Gbit)\", :media => \"PCIe\", :module => \"SoapyXTRX\", :name => \"XTRX\", :serial => \"\", :type => \"xtrx\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Devices may be selected just by indexing:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device = Devices()[1]\n21:11:54.675118 DEBUG:  xtrxllpciev0_discovery:264 [PCIE] pcie: Found `pcie:///dev/xtrx0`\n21:11:54.688916 DEBUG:  xtrxllpciev0_discovery:264 [PCIE] pcie: Found `pcie:///dev/xtrx0`\n[INFO] Make connection: 'pcie:///dev/xtrx0'\n21:11:54.688990 INFO:   [XTRX] xtrx_open(): dev[0]='pcie:///dev/xtrx0'\n21:11:54.689031 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000300\n21:11:54.706207 INFO:   [CTRL] PCI:/dev/xtrx0: XTRX Rev4 (04000113)\n21:11:54.706246 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA STOP MIMO @0.0\n21:11:54.706251 INFO:   [PCIE] PCI:/dev/xtrx0: Device `pcie:///dev/xtrx0` has been opened successfully\nCPU Features: SSE2+ SSE4.1+ AVX+ FMA+\n21:11:54.820272 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000304\n21:11:54.920458 INFO:   [CTRL] PCI:/dev/xtrx0: FPGA V_GPIO set to 3280mV\n21:11:54.920509 INFO:   [CTRL] PCI:/dev/xtrx0: LMS PMIC DCDC out set to VA18=1880mV VA14=1480mV VA12=1340mV\n21:11:54.924038 INFO:   [CTRL] PCI:/dev/xtrx0: FPGA V_IO set to 1800mV\n21:11:54.934544 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000306\n21:11:54.945459 INFO:   [LSM7] PCI:/dev/xtrx0: LMS VER:7 REV:1 MASK:1 (3841)\n21:11:54.945515 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x00031e\n[INFO] Created: `pcie:///dev/xtrx0`\nSoapySDR xtrxdev device (driver: xtrxsoapy) w/ 2 TX channels and 2 RX channels","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The channels on the device are then available on the resulting object","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device.tx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Tx, 0)\n Channel(xtrxdev, Tx, 1)\n\njulia> device.rx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Rx, 0)\n Channel(xtrxdev, Rx, 1)\n\njulia> device.tx[1]\nTX Channel #1 on xtrxdev\n  Selected Antenna [TXH, TXW]: TXW\n  Bandwidth [ 800 kHz .. 16 MHz, 28..60 MHz ]: 0.0 Hz\n  Frequency [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    RF [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    BB [ -00..00 Hz ]: 0.0 Hz\n  Gain [0.0 dB .. 52.0 dB]: 0.0 dB\n    PAD [0.0 dB .. 52.0 dB]: 0.0 dB\n  Sample Rate [ 2.1..56.2 MHz, 61.4..80 MHz ]: 0.0 Hz\n  DC offset correction: (0.0, 0.0)\n  IQ balance correction: (0.0, 0.0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To send or receive data, start a stream on a particular channel:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> stream = SDRStream(ComplexF32, [device.rx[1]])\n21:15:44.166249 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA SKIP MIMO @0.0\n21:15:44.166307 INFO:   [LSM7] PCI:/dev/xtrx0: 0x0124[00, 00]\n21:15:44.166759 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA SKIP MIMO @0.0\n21:15:44.166769 INFO:   [LMSF] PCI:/dev/xtrx0: Auto RX band selection: LNAL\n21:15:44.166772 INFO:   [LMSF] PCI:/dev/xtrx0: Set RX band to 2 (L)\n21:15:44.166971 INFO:   [CTRL] PCI:/dev/xtrx0: RX_ANT: 1 TX_ANT: 0\n21:15:44.166973 INFO:   [LMSF] PCI:/dev/xtrx0: DC START\n21:15:44.167022 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167039 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167056 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167099 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167116 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167147 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167187 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167206 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167236 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167268 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167335 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[0]=0000\n21:15:44.167416 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[1]=0000\n21:15:44.167506 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[2]=0000\n21:15:44.167573 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[3]=0000\n21:15:44.167621 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[0]=0000\n21:15:44.167671 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[1]=0000\n21:15:44.167719 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[2]=0000\n21:15:44.167777 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[3]=0000\nStream on xtrxdev","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These may then be accessed using standard IO functions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> SoapySDR.activate!(stream)\n\njulia> Base.read(stream, 10_000)","category":"page"}]
}

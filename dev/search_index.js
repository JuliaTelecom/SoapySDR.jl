var documenterSearchIndex = {"docs":
[{"location":"drivers/#Loading-Drivers","page":"Loading Drivers","title":"Loading Drivers","text":"","category":"section"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"Below is a list of driver modules that may be installed with the Julia package manager.","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"Device Julia Package\nxrtx xtrx_jll\nRTL-SDR SoapyRTLSDR_jll\nLimeSDR SoapyLMS7_jll\nUSRP SoapyUHD_jll\nPluto SDR SoapyPlutoSDR_jll","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"If you need a driver module that is not listed, you can search JuliaHub to see if it may have been added to the package manager. If not, please file an issue. Alternatively, you can see the instructions below about using operating system provided modules with SoapySDR.jl.","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"To activate the driver and module, simply use the package along with SoapySDR. For example:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"julia> using SoapySDR, xtrx_jll","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"or:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"julia> using SoapySDR, SoapyRTLSDR_jll","category":"page"},{"location":"drivers/#Loading-System-Provided-Driver-Modules","page":"Loading Drivers","title":"Loading System-Provided Driver Modules","text":"","category":"section"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"The SOAPY_SDR_PLUGIN_PATH environmental variable is read by SoapySDR to load local driver modules. For example, on Ubuntu one may use the Ubuntu package manager to install all SoapySDR driver modules:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"sudo apt install soapysdr0.8-module-all ","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"These can then be used from SoapySDR.jl by exporting the environmental variable with the module directory:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"export SOAPY_SDR_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/SoapySDR/modules0.8/","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"This can add support for more devices than is provided by the Julia package manager, however compatibility is not guaranteed.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Below are some common issues and how to resolve them. If you don't find the issue listed here, please file an issue. We are always looking to help identify and fix bugs.","category":"page"},{"location":"troubleshooting/#No-Devices-Found","page":"Troubleshooting","title":"No Devices Found","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"You may see:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia> Devices()\nNo devices available! Make sure a supported SDR module is included.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have included a module driver from the module list.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If this doesn't work, and you are on Linux, please see the udev section below.","category":"page"},{"location":"troubleshooting/#Linux-Troubleshooting","page":"Troubleshooting","title":"Linux Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Udev-Rules","page":"Troubleshooting","title":"Udev Rules","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Udev rules should be copied into /etc/udev/rules.d/.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Udev rules for some common devices are linked below:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"RTL-SDR\nUSRP\nLimeSDR\nADALM-Pluto","category":"page"},{"location":"troubleshooting/#Blacklisting-Kernel-Modules","page":"Troubleshooting","title":"Blacklisting Kernel Modules","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For some devices such as the RTL-SDR, a kernel module may need to be blacklisted in order to use the user space driver. Typically the library will warn is this is required. Please check you distribution instructions for how to do this.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"RTL-SDR module name: dvb_usb_rtl28xxu","category":"page"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"highlevel/#SoapySDR-High-Level-API","page":"High Level API","title":"SoapySDR High Level API","text":"","category":"section"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"Modules = [SoapySDR]\nPages = [\"highlevel.jl\",\n         \"loghandler.jl\"]","category":"page"},{"location":"highlevel/#SoapySDR.Channel","page":"High Level API","title":"SoapySDR.Channel","text":"Channel\n\nA channel on the given Device.\n\nNote!!: A Channel can be created from a Device or extracted from a ChannelList. It should rarely be necessary to create a Channel directly.\n\nHas the following properties:\n\ndevice::Device - Device to which the Channel belongs\ndirection - either Tx or Rx\nidx - channel index used by Soapy\ninfo - channel info consiting of KWArgs\nantenna - antenna name\ngain_mode - Automatic Gain control, true, false, or missing\ngain_elements - list of GainElements of the channel\ngain - effective gain, distributed amongst the GainElements\ndc_offset_mode - Automatic DC offset mode, true, false or missing\ndc_offset -  DC offset value\niq_balance_mode -  Automatic IQ balance mode, true, false or missing\niq_balance - IQ balance value\nfrequency_correction - frequency correction value\nsample_rate - sample rate\nbandwidth - bandwidth\nfrequency - center frequency\nfullduplex - full duplex mode with other (TX/RX) channels\nnative_stream_format - native stream format\nstream_formats - supported stream formats (converted by Soapy)\nfullscale - full scale value\nsensors - sensor list\n\nReading and writing to Components\n\ngains, antennas, and sensors may consist of a chain or selectable subcomponets. To set or read e.g. a sensors, one may use the following syntax:\n\ndev = Devices()[1] cr = dev.rx[1]\n\nread a sensor value\n\ns1 = cr.sensors[1] cr[s1]\n\nread and set the gain element\n\ng1 = cr.gain_elements[1] cr[g1] cr[g1] = 4*u\"dB\"\n\nread and set the frequency component\n\nf1 = cr.frequency_components[1] cr[f1] cr[f1] = 2.498*u\"GHz\"\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.ChannelList","page":"High Level API","title":"SoapySDR.ChannelList","text":"ChannelList\n\nA grouping of channels on the Device. Note: This should not be called directly, but rather through the Device.rx and Device.tx properties.\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.Device","page":"High Level API","title":"SoapySDR.Device","text":"Device\n\nA device is a collection of SDR channels, obtained from the Devices() list.\n\nFields:\n\ninfo\ndriver\nhardware\ntx\nrx\nsensors\ntime_source\ntime_sources\nclock_source\nclock_sources\nfrontendmapping_rx\nfrontendmapping_tx\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.Devices","page":"High Level API","title":"SoapySDR.Devices","text":"Devices()\nDevice(args...)\n\nEnumerates all detectable SDR devices on the system. Indexing into the returned Devices object returns a list of keywords used to create a Device struct.\n\nOptionally pass in a list of keywords to filter the returned list. Example:\n\nDevices(driver=\"rtlsdr\")\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#SoapySDR.Stream","page":"High Level API","title":"SoapySDR.Stream","text":"SoapySDR.Stream(channels)\nSoapySDR.Stream(::Type{T}, channels)\n\nConstructs a Stream{T} where T is the stream type of the device. If unspecified, the native format will be used.\n\nFields:\n\nnchannels - The number of channels in the stream\nmtu - The stream Maximum Transmission Unit\nnumdirectaccess_buffers - The numer of direct access buffers available in the stream\n\nExample\n\nSoapySDR.Stream(Devices()[1].rx)\n\n\n\n\n\n","category":"type"},{"location":"highlevel/#Base.read!-Union{Tuple{T}, Tuple{N}, Tuple{SoapySDR.Stream{T}, Tuple{Vararg{AbstractVector{T}, N}}}} where {N, T}","page":"High Level API","title":"Base.read!","text":"read!(s::SoapySDR.Stream{T}, buffers::NTuple{N, Vector{T}}; [timeout], [flags::Ref{Int}], [throw_error=false])\n\nRead data from the device into the given buffers.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#Base.read-Union{Tuple{T}, Tuple{SoapySDR.Stream{T}, Integer}} where T","page":"High Level API","title":"Base.read","text":"read(s::SoapySDR.Stream{T}, nb::Integer; [timeout])\n\nRead at most nb samples from s\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#Base.setindex!-Tuple{Device, Tuple{Integer, Integer}, SoapySDR.Register}","page":"High Level API","title":"Base.setindex!","text":"Set a register value on a device:\n\ndev[SoapySDR.Register(\"LMS7002M\")] = (0x1234, 0x5678) # tuple of: (addr, value)\ndev[(SoapySDR.Register(\"LMS7002M\"), 0x1234)] = 0x5678 # this is also equivalent, and symmetric to the getindex form to read\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#Base.write-Union{Tuple{T}, Tuple{N}, Tuple{SoapySDR.Stream{T}, Tuple{Vararg{AbstractVector{T}, N}}}} where {N, T}","page":"High Level API","title":"Base.write","text":"write(s::SoapySDR.Stream{T}, buffer::NTuple{N, Vector{T}}; [timeout], [flags::Ref{Int}], [throw_error=false]) where {N, T}\n\nWrite data from the given buffers into the device.  The buffers must all be the same length.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.get_hardware_time-Tuple{Device, String}","page":"High Level API","title":"SoapySDR.get_hardware_time","text":"get_hardware_time(::Device, what::String)\n\nGet hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.get_sensor_info-Tuple{Device, Any}","page":"High Level API","title":"SoapySDR.get_sensor_info","text":"get_sensor_info(::Device, ::String)\n\nRead the sensor extracted from list_sensors. Returns: the value as a string. Note: Appropriate conversions need to be done by the user.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.has_hardware_time-Tuple{Device, String}","page":"High Level API","title":"SoapySDR.has_hardware_time","text":"has_hardware_time(::Device, what::String)\n\nQuery if the Device has hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.list_sample_rates-Tuple{SoapySDR.Channel}","page":"High Level API","title":"SoapySDR.list_sample_rates","text":"list_sample_rates(::Channel)\n\nList the natively supported sample rates for a given channel.\n\n\n\n\n\n","category":"method"},{"location":"highlevel/#SoapySDR.set_hardware_time-Tuple{Device, Int64, String}","page":"High Level API","title":"SoapySDR.set_hardware_time","text":"set_hardware_time(::Device, timeNs::Int64 what::String)\n\nSet hardware time for the given source.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"lowlevel/#SoapySDR-Low-Level-API","page":"Low Level API","title":"SoapySDR Low Level API","text":"","category":"section"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"warning: Warning\nThis documentation is part of the low level libsoapysdr interface. These bindings and documentation are autogenerated and reflect the complete SoapySDR C API. For end-users, the high-level Julia APIs are preferred.","category":"page"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"Modules = [SoapySDR]\nPages = [\"lowlevel/auto_wrap.jl\"]","category":"page"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfo","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfo","text":"SoapySDRArgInfo\n\nDefinition for argument info\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfoType","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfoType","text":"SoapySDRArgInfoType\n\nPossible data types for argument info\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRConverterFunction","page":"Low Level API","title":"SoapySDR.SoapySDRConverterFunction","text":"A typedef for declaring a ConverterFunction to be maintained in the ConverterRegistry. A converter function copies and optionally converts an input buffer of one format into an output buffer of another format. The parameters are (input pointer, output pointer, number of elements, optional scalar)\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRConverterFunctionPriority","page":"Low Level API","title":"SoapySDR.SoapySDRConverterFunctionPriority","text":"SoapySDRConverterFunctionPriority\n\nAllow selection of a converter function with a given source and target format.\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs","text":"SoapySDRKwargs\n\nDefinition for a key/value string map\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRLogHandler","page":"Low Level API","title":"SoapySDR.SoapySDRLogHandler","text":"Typedef for the registered log handler function.\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRLogLevel","page":"Low Level API","title":"SoapySDR.SoapySDRLogLevel","text":"SoapySDRLogLevel\n\nThe available priority levels for log messages.\n\nThe default log level threshold is SOAPYSDRINFO. Log messages with lower priorities are dropped.\n\nThe default threshold can be set via the SOAPYSDRLOGLEVEL environment variable. Set SOAPYSDRLOGLEVEL to the string value: \"WARNING\", \"ERROR\", \"DEBUG\", etc... or set it to the equivalent integer value.\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRRange","page":"Low Level API","title":"SoapySDR.SoapySDRRange","text":"SoapySDRRange\n\nDefinition for a min/max numeric range\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfoList_clear-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfoList_clear","text":"SoapySDRArgInfoList_clear(info, length)\n\nClear a list of argument info structures. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRArgInfo_clear-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRArgInfo_clear","text":"SoapySDRArgInfo_clear(info)\n\nClear the contents of a argument info structure. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_getFunction-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_getFunction","text":"SoapySDRConverter_getFunction(sourceFormat, targetFormat)\n\nGet a converter between a source and target format with the highest available priority. \\param sourceFormat the source format markup string \\param targetFormat the target format markup string \\return a conversion function pointer or nullptr if none are found\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_getFunctionWithPriority-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_getFunctionWithPriority","text":"SoapySDRConverter_getFunctionWithPriority(sourceFormat, targetFormat, priority)\n\nGet a converter between a source and target format with a given priority. \\param sourceFormat the source format markup string \\param targetFormat the target format markup string \\return a conversion function pointer or nullptr if none are found\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_listAvailableSourceFormats-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_listAvailableSourceFormats","text":"SoapySDRConverter_listAvailableSourceFormats(length)\n\nGet a list of known source formats in the registry. \\param [out] length the number of known source formats \\return a list of known source formats\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_listPriorities-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_listPriorities","text":"SoapySDRConverter_listPriorities(sourceFormat, targetFormat, length)\n\nGet a list of available converter priorities for a given source and target format. \\param sourceFormat the source format markup string \\param targetFormat the target format markup string \\param [out] length the number of priorities \\return a list of priorities or nullptr if none are found\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_listSourceFormats-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_listSourceFormats","text":"SoapySDRConverter_listSourceFormats(targetFormat, length)\n\nGet a list of existing source formats to which we can convert the specified target from. \\param targetFormat the target format markup string \\param [out] length the number of valid source formats \\return a list of valid source formats\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRConverter_listTargetFormats-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRConverter_listTargetFormats","text":"SoapySDRConverter_listTargetFormats(sourceFormat, length)\n\nGet a list of existing target formats to which we can convert the specified source from. \\param sourceFormat the source format markup string \\param [out] length the number of valid target formats \\return a list of valid target formats\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_acquireReadBuffer-NTuple{7, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_acquireReadBuffer","text":"SoapySDRDevice_acquireReadBuffer(device, stream, handle, buffs, flags, timeNs, timeoutUs)\n\nAcquire direct buffers from a receive stream. This call is part of the direct buffer access API.\n\nThe buffs array will be filled with a stream pointer for each channel. Each pointer can be read up to the number of return value elements.\n\nThe handle will be set by the implementation so that the caller may later release access to the buffers with releaseReadBuffer(). Handle represents an index into the internal scatter/gather table such that handle is between 0 and num direct buffers - 1.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param handle an index value used in the release() call \\param buffs an array of void* buffers num chans in size \\param flags optional flag indicators about the result \\param timeNs the buffer's timestamp in nanoseconds \\param timeoutUs the timeout in microseconds \\return the number of elements read per buffer or error code\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_acquireWriteBuffer-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_acquireWriteBuffer","text":"SoapySDRDevice_acquireWriteBuffer(device, stream, handle, buffs, timeoutUs)\n\nAcquire direct buffers from a transmit stream. This call is part of the direct buffer access API.\n\nThe buffs array will be filled with a stream pointer for each channel. Each pointer can be written up to the number of return value elements.\n\nThe handle will be set by the implementation so that the caller may later release access to the buffers with releaseWriteBuffer(). Handle represents an index into the internal scatter/gather table such that handle is between 0 and num direct buffers - 1.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param handle an index value used in the release() call \\param buffs an array of void* buffers num chans in size \\param timeoutUs the timeout in microseconds \\return the number of available elements per buffer or error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_activateStream-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_activateStream","text":"SoapySDRDevice_activateStream(device, stream, flags, timeNs, numElems)\n\nActivate a stream. Call activate to prepare a stream before using read/write(). The implementation control switches or stimulate data flow.\n\nThe timeNs is only valid when the flags have SOAPYSDRHASTIME. The numElems count can be used to request a finite burst size. The SOAPYSDRENDBURST flag can signal end on the finite burst. Not all implementations will support the full range of options. In this case, the implementation returns SOAPYSDRNOT_SUPPORTED.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param flags optional flag indicators about the stream \\param timeNs optional activation time in nanoseconds \\param numElems optional element count for burst control \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_closeStream-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_closeStream","text":"SoapySDRDevice_closeStream(device, stream)\n\nClose an open stream created by setupStream \\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_deactivateStream-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_deactivateStream","text":"SoapySDRDevice_deactivateStream(device, stream, flags, timeNs)\n\nDeactivate a stream. Call deactivate when not using using read/write(). The implementation control switches or halt data flow.\n\nThe timeNs is only valid when the flags have SOAPYSDRHASTIME. Not all implementations will support the full range of options. In this case, the implementation returns SOAPYSDRNOTSUPPORTED.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param flags optional flag indicators about the stream \\param timeNs optional deactivation time in nanoseconds \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_enumerate-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_enumerate","text":"SoapySDRDevice_enumerate(args, length)\n\nEnumerate a list of available devices on the system. \\param args device construction key/value argument filters \\param [out] length the number of elements in the result. \\return a list of arguments strings, each unique to a device\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_enumerateStrArgs-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_enumerateStrArgs","text":"SoapySDRDevice_enumerateStrArgs(args, length)\n\nEnumerate a list of available devices on the system. Markup format for args: \"keyA=valA, keyB=valB\". \\param args a markup string of key/value argument filters \\param [out] length the number of elements in the result. \\return a list of arguments strings, each unique to a device\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getAntenna-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getAntenna","text":"SoapySDRDevice_getAntenna(device, direction, channel)\n\nGet the selected antenna on a chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the name of an available antenna\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getBandwidth-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getBandwidth","text":"SoapySDRDevice_getBandwidth(device, direction, channel)\n\nGet the baseband filter width of the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the baseband filter width in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getBandwidthRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getBandwidthRange","text":"SoapySDRDevice_getBandwidthRange(device, direction, channel, length)\n\nGet the range of possible baseband filter widths. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of ranges \\return a list of bandwidth ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelInfo-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelInfo","text":"SoapySDRDevice_getChannelInfo(device, direction, channel)\n\nGet channel info given the streaming direction \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel the channel number to get info for \\return channel information\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelSensorInfo-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelSensorInfo","text":"SoapySDRDevice_getChannelSensorInfo(device, direction, channel, key)\n\nGet meta-information about a channel sensor. Example: displayable name, type, range. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param key the ID name of an available sensor \\return meta-information about a sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelSettingInfo-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelSettingInfo","text":"SoapySDRDevice_getChannelSettingInfo(device, direction, channel, length)\n\nDescribe the allowed keys and values used for channel settings. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of sensor names \\return a list of argument info structures\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getClockSource-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getClockSource","text":"SoapySDRDevice_getClockSource(device)\n\nGet the clock source of the device \\param device a pointer to a device instance \\return the name of a clock source\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getDCOffset-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getDCOffset","text":"SoapySDRDevice_getDCOffset(device, direction, channel, offsetI, offsetQ)\n\nGet the frontend DC offset correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] offsetI the relative correction (1.0 max) \\param [out] offsetQ the relative correction (1.0 max) \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getDCOffsetMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getDCOffsetMode","text":"SoapySDRDevice_getDCOffsetMode(device, direction, channel)\n\nGet the automatic DC offset corrections mode. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true for automatic offset correction\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getDirectAccessBufferAddrs-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getDirectAccessBufferAddrs","text":"SoapySDRDevice_getDirectAccessBufferAddrs(device, stream, handle, buffs)\n\nGet the buffer addresses for a scatter/gather table entry. When the underlying DMA implementation uses scatter/gather then this call provides the user addresses for that table.\n\nExample: The caller may query the DMA memory addresses once after stream creation to pre-allocate a re-usable ring-buffer.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param handle an index value between 0 and num direct buffers - 1 \\param buffs an array of void* buffers num chans in size \\return 0 for success or error code when not supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getDriverKey-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getDriverKey","text":"SoapySDRDevice_getDriverKey(device)\n\nA key that uniquely identifies the device driver. This key identifies the underlying implementation. Several variants of a product may share a driver. \\param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequency-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequency","text":"SoapySDRDevice_getFrequency(device, direction, channel)\n\nGet the overall center frequency of the chain.\n\nFor RX, this specifies the down-conversion frequency.\nFor TX, this specifies the up-conversion frequency.\n\n\\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the center frequency in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyArgsInfo-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyArgsInfo","text":"SoapySDRDevice_getFrequencyArgsInfo(device, direction, channel, length)\n\nQuery the argument info description for tune args. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of argument infos \\return a list of argument info structures\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyComponent-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyComponent","text":"SoapySDRDevice_getFrequencyComponent(device, direction, channel, name)\n\nGet the frequency of a tunable element in the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of a tunable element \\return the tunable element's frequency in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyCorrection-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyCorrection","text":"SoapySDRDevice_getFrequencyCorrection(device, direction, channel)\n\nGet the frontend frequency correction value. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the correction value in PPM\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRange","text":"SoapySDRDevice_getFrequencyRange(device, direction, channel, length)\n\nGet the range of overall frequency values. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of ranges \\return a list of frequency ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRangeComponent-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRangeComponent","text":"SoapySDRDevice_getFrequencyRangeComponent(device, direction, channel, name, length)\n\nGet the range of tunable values for the specified element. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of a tunable element \\param [out] length the number of ranges \\return a list of frequency ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrontendMapping-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrontendMapping","text":"SoapySDRDevice_getFrontendMapping(device, direction)\n\nGet the mapping configuration string. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\return the vendor-specific mapping string\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFullDuplex-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFullDuplex","text":"SoapySDRDevice_getFullDuplex(device, direction, channel)\n\nFind out if the specified channel is full or half duplex. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true for full duplex, false for half duplex\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGain-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGain","text":"SoapySDRDevice_getGain(device, direction, channel)\n\nGet the overall value of the gain elements in a chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the value of the gain in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainElement-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainElement","text":"SoapySDRDevice_getGainElement(device, direction, channel, name)\n\nGet the value of an individual amplification element in a chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of an amplification element \\return the value of the gain in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainElementRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainElementRange","text":"SoapySDRDevice_getGainElementRange(device, direction, channel, name)\n\nGet the range of possible gain values for a specific element. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of an amplification element \\return the range of possible gain values for the specified amplification element in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainMode","text":"SoapySDRDevice_getGainMode(device, direction, channel)\n\nGet the automatic gain mode on the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true for automatic gain setting\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainRange","text":"SoapySDRDevice_getGainRange(device, direction, channel)\n\nGet the overall range of possible gain values. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the range of possible gain values for this channel in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareInfo-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareInfo","text":"SoapySDRDevice_getHardwareInfo(device)\n\nQuery a dictionary of available device information. This dictionary can any number of values like vendor name, product name, revisions, serials... This information can be displayed to the user to help identify the instantiated device. \\param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareKey-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareKey","text":"SoapySDRDevice_getHardwareKey(device)\n\nA key that uniquely identifies the hardware. This key should be meaningful to the user to optimize for the underlying hardware. \\param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getHardwareTime-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getHardwareTime","text":"SoapySDRDevice_getHardwareTime(device, what)\n\nRead the time from the hardware clock on the device. The what argument can refer to a specific time counter. \\param device a pointer to a device instance \\param what optional argument \\return the time in nanoseconds\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getIQBalance-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getIQBalance","text":"SoapySDRDevice_getIQBalance(device, direction, channel, balanceI, balanceQ)\n\nGet the frontend IQ balance correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] balanceI the relative correction (1.0 max) \\param [out] balanceQ the relative correction (1.0 max) \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getIQBalanceMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getIQBalanceMode","text":"SoapySDRDevice_getIQBalanceMode(device, direction, channel)\n\nGet the automatic frontend IQ balance corrections mode. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true for automatic correction\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getMasterClockRate-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getMasterClockRate","text":"SoapySDRDevice_getMasterClockRate(device)\n\nGet the master clock rate of the device. \\param device a pointer to a device instance \\return the clock rate in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getMasterClockRates-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getMasterClockRates","text":"SoapySDRDevice_getMasterClockRates(device, length)\n\nGet the range of available master clock rates. \\param device a pointer to a device instance \\param [out] length the number of ranges \\return a list of clock rate ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNativeDeviceHandle-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNativeDeviceHandle","text":"SoapySDRDevice_getNativeDeviceHandle(device)\n\nA handle to the native device used by the driver. The implementation may return a null value if it does not support or does not wish to provide access to the native handle. \\param device a pointer to a device instance \\return a handle to the native device or null\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNativeStreamFormat-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNativeStreamFormat","text":"SoapySDRDevice_getNativeStreamFormat(device, direction, channel, fullScale)\n\nGet the hardware's native stream format for this channel. This is the format used by the underlying transport layer, and the direct buffer access API calls (when available). \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] fullScale the maximum possible value \\return the native stream buffer format string\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNumChannels-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNumChannels","text":"SoapySDRDevice_getNumChannels(device, direction)\n\nGet a number of channels given the streaming direction \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\return the number of channels\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getNumDirectAccessBuffers-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getNumDirectAccessBuffers","text":"SoapySDRDevice_getNumDirectAccessBuffers(device, stream)\n\nHow many direct access buffers can the stream provide? This is the number of times the user can call acquire() on a stream without making subsequent calls to release(). A return value of 0 means that direct access is not supported.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\return the number of direct access buffers or 0\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getReferenceClockRate-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getReferenceClockRate","text":"SoapySDRDevice_getReferenceClockRate(device)\n\nGet the reference clock rate of the device. \\param device a pointer to a device instance \\return the clock rate in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getReferenceClockRates-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getReferenceClockRates","text":"SoapySDRDevice_getReferenceClockRates(device, length)\n\nGet the range of available reference clock rates. \\param device a pointer to a device instance \\param [out] length the number of sources \\return a list of clock rate ranges in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSampleRate-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSampleRate","text":"SoapySDRDevice_getSampleRate(device, direction, channel)\n\nGet the baseband sample rate of the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return the sample rate in samples per second\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSampleRateRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSampleRateRange","text":"SoapySDRDevice_getSampleRateRange(device, direction, channel, length)\n\nGet the range of possible baseband sample rates. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of sample rates \\return a list of sample rate ranges in samples per second\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSensorInfo-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSensorInfo","text":"SoapySDRDevice_getSensorInfo(device, key)\n\nGet meta-information about a sensor. Example: displayable name, type, range. \\param device a pointer to a device instance \\param key the ID name of an available sensor \\return meta-information about a sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSettingInfo-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSettingInfo","text":"SoapySDRDevice_getSettingInfo(device, length)\n\nDescribe the allowed keys and values used for settings. \\param device a pointer to a device instance \\param [out] length the number of sensor names \\return a list of argument info structures\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamArgsInfo-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamArgsInfo","text":"SoapySDRDevice_getStreamArgsInfo(device, direction, channel, length)\n\nQuery the argument info description for stream args. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of argument infos \\return a list of argument info structures\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamFormats-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamFormats","text":"SoapySDRDevice_getStreamFormats(device, direction, channel, length)\n\nQuery a list of the available stream formats. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of format strings \\return a list of allowed format strings.  See SoapySDRDevice_setupStream() for the format syntax.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamMTU-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamMTU","text":"SoapySDRDevice_getStreamMTU(device, stream)\n\nGet the stream's maximum transmission unit (MTU) in number of elements. The MTU specifies the maximum payload transfer in a stream operation. This value can be used as a stream buffer allocation size that can best optimize throughput given the underlying stream implementation.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\return the MTU in number of stream elements (never zero)\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getTimeSource-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getTimeSource","text":"SoapySDRDevice_getTimeSource(device)\n\nGet the time source of the device \\param device a pointer to a device instance \\return the name of a time source\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasDCOffset-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasDCOffset","text":"SoapySDRDevice_hasDCOffset(device, direction, channel)\n\nDoes the device support frontend DC offset correction? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true if DC offset corrections are supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasDCOffsetMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasDCOffsetMode","text":"SoapySDRDevice_hasDCOffsetMode(device, direction, channel)\n\nDoes the device support automatic DC offset corrections? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true if automatic corrections are supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasFrequencyCorrection-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasFrequencyCorrection","text":"SoapySDRDevice_hasFrequencyCorrection(device, direction, channel)\n\nDoes the device support frontend frequency correction? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true if frequency corrections are supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasGainMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasGainMode","text":"SoapySDRDevice_hasGainMode(device, direction, channel)\n\nDoes the device support automatic gain control? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true for automatic gain control\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasHardwareTime-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasHardwareTime","text":"SoapySDRDevice_hasHardwareTime(device, what)\n\nDoes this device have a hardware clock? \\param device a pointer to a device instance \\param what optional argument \\return true if the hardware clock exists\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasIQBalance-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasIQBalance","text":"SoapySDRDevice_hasIQBalance(device, direction, channel)\n\nDoes the device support frontend IQ balance correction? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true if IQ balance corrections are supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_hasIQBalanceMode-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_hasIQBalanceMode","text":"SoapySDRDevice_hasIQBalanceMode(device, direction, channel)\n\nDoes the device support automatic frontend IQ balance correction? \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\return true if automatic IQ balance corrections are supported\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_lastError-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_lastError","text":"SoapySDRDevice_lastError()\n\nGet the last error message after a device call fails. When an device API call throws, the C bindings catch the exception, store its message in thread-safe storage, and return a non-zero status code to indicate failure. Use lastError() to access the exception's error message.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_lastStatus-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_lastStatus","text":"SoapySDRDevice_lastStatus()\n\nGet the last status code after a Device API call. The status code is cleared on entry to each Device call. When an device API call throws, the C bindings catch the exception, and set a non-zero last status code. Use lastStatus() to determine success/failure for Device calls without integer status return codes.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listAntennas-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listAntennas","text":"SoapySDRDevice_listAntennas(device, direction, channel, length)\n\nGet a list of available antennas to select on a given chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of antenna names \\return a list of available antenna names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listBandwidths-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listBandwidths","text":"SoapySDRDevice_listBandwidths(device, direction, channel, length)\n\nGet the range of possible baseband filter widths. \\deprecated replaced by getBandwidthRange() \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of bandwidths \\return a list of possible bandwidths in Hz\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listChannelSensors-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listChannelSensors","text":"SoapySDRDevice_listChannelSensors(device, direction, channel, length)\n\nList the available channel readback sensors. A sensor can represent a reference lock, RSSI, temperature. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of sensor names \\return a list of available sensor string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listClockSources-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listClockSources","text":"SoapySDRDevice_listClockSources(device, length)\n\nGet the list of available clock sources. \\param device a pointer to a device instance \\param [out] length the number of sources \\return a list of clock source names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listFrequencies-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listFrequencies","text":"SoapySDRDevice_listFrequencies(device, direction, channel, length)\n\nList available tunable elements in the chain. Elements should be in order RF to baseband. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel \\param [out] length the number names \\return a list of tunable elements by name\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listGPIOBanks-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listGPIOBanks","text":"SoapySDRDevice_listGPIOBanks(device, length)\n\nGet a list of available GPIO banks by name. \\param [out] length the number of GPIO banks \\param device a pointer to a device instance\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listGains-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listGains","text":"SoapySDRDevice_listGains(device, direction, channel, length)\n\nList available amplification elements. Elements should be in order RF to baseband. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel \\param [out] length the number of gain names \\return a list of gain string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listRegisterInterfaces-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listRegisterInterfaces","text":"SoapySDRDevice_listRegisterInterfaces(device, length)\n\nGet a list of available register interfaces by name. \\param device a pointer to a device instance \\param [out] length the number of interfaces \\return a list of available register interfaces\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listSampleRates-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listSampleRates","text":"SoapySDRDevice_listSampleRates(device, direction, channel, length)\n\nGet the range of possible baseband sample rates. \\deprecated replaced by getSampleRateRange() \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param [out] length the number of sample rates \\return a list of possible rates in samples per second\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listSensors-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listSensors","text":"SoapySDRDevice_listSensors(device, length)\n\nList the available global readback sensors. A sensor can represent a reference lock, RSSI, temperature. \\param device a pointer to a device instance \\param [out] length the number of sensor names \\return a list of available sensor string names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listTimeSources-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listTimeSources","text":"SoapySDRDevice_listTimeSources(device, length)\n\nGet the list of available time sources. \\param device a pointer to a device instance \\param [out] length the number of sources \\return a list of time source names\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listUARTs-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listUARTs","text":"SoapySDRDevice_listUARTs(device, length)\n\nEnumerate the available UART devices. \\param device a pointer to a device instance \\param [out] length the number of UART names \\return a list of names of available UARTs\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make","text":"SoapySDRDevice_make(args)\n\nMake a new Device object given device construction args. The device pointer will be stored in a table so subsequent calls with the same arguments will produce the same device. For every call to make, there should be a matched call to unmake.\n\n\\param args device construction key/value argument map \\return a pointer to a new Device object\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_makeStrArgs-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_makeStrArgs","text":"SoapySDRDevice_makeStrArgs(args)\n\nMake a new Device object given device construction args. The device pointer will be stored in a table so subsequent calls with the same arguments will produce the same device. For every call to make, there should be a matched call to unmake.\n\n\\param args a markup string of key/value arguments \\return a pointer to a new Device object or null for error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make_list-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make_list","text":"SoapySDRDevice_make_list(argsList, length)\n\nCreate a list of devices from a list of construction arguments. This is a convenience call to parallelize device construction, and is fundamentally a parallel for loop of make(Kwargs).\n\n\\param argsList a list of device arguments per each device \\param length the length of the argsList array \\return a list of device pointers per each specified argument\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make_listStrArgs-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make_listStrArgs","text":"SoapySDRDevice_make_listStrArgs(argsList, length)\n\nCreate a list of devices from a list of construction arguments. This is a convenience call to parallelize device construction, and is fundamentally a parallel for loop of makeStrArgs(args).\n\n\\param argsList a list of device arguments per each device \\param length the length of the argsList array \\return a list of device pointers per each specified argument\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readChannelSensor-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readChannelSensor","text":"SoapySDRDevice_readChannelSensor(device, direction, channel, key)\n\nReadback a channel sensor given the name. The value returned is a string which can represent a boolean (\"true\"/\"false\"), an integer, or float. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param key the ID name of an available sensor \\return the current value of the sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readChannelSetting-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readChannelSetting","text":"SoapySDRDevice_readChannelSetting(device, direction, channel, key)\n\nRead an arbitrary channel setting on the device. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param key the setting identifier \\return the setting value\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readGPIO-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readGPIO","text":"SoapySDRDevice_readGPIO(device, bank)\n\nReadback the value of a GPIO bank. \\param device a pointer to a device instance \\param bank the name of an available bank \\return an integer representing GPIO bits\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readGPIODir-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readGPIODir","text":"SoapySDRDevice_readGPIODir(device, bank)\n\nRead the data direction of a GPIO bank. \\param device a pointer to a device instance 1 bits represent outputs, 0 bits represent inputs. \\param bank the name of an available bank \\return an integer representing data direction bits\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readI2C-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readI2C","text":"SoapySDRDevice_readI2C(device, addr, numBytes)\n\nRead from an available I2C slave. If the device contains multiple I2C masters, the address bits can encode which master. Pass the number of bytes to be read in via numBytes; numBytes will be set to the number of actual bytes read. \\param device a pointer to a device instance \\param addr the address of the slave \\param [inout] numBytes the number of bytes to read \\return an array of bytes read from the slave\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readRegister-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readRegister","text":"SoapySDRDevice_readRegister(device, name, addr)\n\nRead a register on the device given the interface name. \\param device a pointer to a device instance \\param name the name of a available register interface \\param addr the register address \\return the register value\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readRegisters-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readRegisters","text":"SoapySDRDevice_readRegisters(device, name, addr, length)\n\nRead a memory block on the device given the interface name. Pass the number of words to be read in via length; length will be set to the number of actual words read. \\param device a pointer to a device instance \\param name the name of a available memory block interface \\param addr the memory block start address \\param [inout] length number of words to be read from memory block \\return the memory block content\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readSensor-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readSensor","text":"SoapySDRDevice_readSensor(device, key)\n\nReadback a global sensor given the name. The value returned is a string which can represent a boolean (\"true\"/\"false\"), an integer, or float. \\param device a pointer to a device instance \\param key the ID name of an available sensor \\return the current value of the sensor\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readSetting-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readSetting","text":"SoapySDRDevice_readSetting(device, key)\n\nRead an arbitrary setting on the device. \\param device a pointer to a device instance \\param key the setting identifier \\return the setting value\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readStream-NTuple{7, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readStream","text":"SoapySDRDevice_readStream(device, stream, buffs, numElems, flags, timeNs, timeoutUs)\n\nRead elements from a stream for reception. This is a multi-channel call, and buffs should be an array of void *, where each pointer will be filled with data from a different channel.\n\nClient code compatibility: The readStream() call should be well defined at all times, including prior to activation and after deactivation. When inactive, readStream() should implement the timeout specified by the caller and return SOAPYSDRTIMEOUT.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param buffs an array of void* buffers num chans in size \\param numElems the number of elements in each buffer \\param [out] flags optional flag indicators about the result \\param [out] timeNs the buffer's timestamp in nanoseconds \\param timeoutUs the timeout in microseconds \\return the number of elements read per buffer or error code\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readStreamStatus-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readStreamStatus","text":"SoapySDRDevice_readStreamStatus(device, stream, chanMask, flags, timeNs, timeoutUs)\n\nReadback status information about a stream. This call is typically used on a transmit stream to report time errors, underflows, and burst completion.\n\nClient code compatibility: Client code may continually poll readStreamStatus() in a loop. Implementations of readStreamStatus() should wait in the call for a status change event or until the timeout expiration. When stream status is not implemented on a particular stream, readStreamStatus() should return SOAPYSDRNOT_SUPPORTED. Client code may use this indication to disable a polling loop.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param chanMask to which channels this status applies \\param flags optional input flags and output flags \\param timeNs the buffer's timestamp in nanoseconds \\param timeoutUs the timeout in microseconds \\return 0 for success or error code like timeout\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_readUART-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_readUART","text":"SoapySDRDevice_readUART(device, which, timeoutUs)\n\nRead bytes from a UART until timeout or newline. Its up to the implementation to set the baud rate, carriage return settings, flushing on newline. \\param device a pointer to a device instance \\param which the name of an available UART \\param timeoutUs a timeout in microseconds \\return a null terminated array of bytes\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_releaseReadBuffer-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_releaseReadBuffer","text":"SoapySDRDevice_releaseReadBuffer(device, stream, handle)\n\nRelease an acquired buffer back to the receive stream. This call is part of the direct buffer access API.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param handle the opaque handle from the acquire() call\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_releaseWriteBuffer-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_releaseWriteBuffer","text":"SoapySDRDevice_releaseWriteBuffer(device, stream, handle, numElems, flags, timeNs)\n\nRelease an acquired buffer back to the transmit stream. This call is part of the direct buffer access API.\n\nStream meta-data is provided as part of the release call, and not the acquire call so that the caller may acquire buffers without committing to the contents of the meta-data, which can be determined by the user as the buffers are filled.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param handle the opaque handle from the acquire() call \\param numElems the number of elements written to each buffer \\param flags optional input flags and output flags \\param timeNs the buffer's timestamp in nanoseconds\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setAntenna-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setAntenna","text":"SoapySDRDevice_setAntenna(device, direction, channel, name)\n\nSet the selected antenna on a chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of an available antenna \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setBandwidth-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setBandwidth","text":"SoapySDRDevice_setBandwidth(device, direction, channel, bw)\n\nSet the baseband filter width of the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param bw the baseband filter width in Hz \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setClockSource-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setClockSource","text":"SoapySDRDevice_setClockSource(device, source)\n\nSet the clock source on the device \\param device a pointer to a device instance \\param source the name of a clock source \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setCommandTime-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setCommandTime","text":"SoapySDRDevice_setCommandTime(device, timeNs, what)\n\nSet the time of subsequent configuration calls. The what argument can refer to a specific command queue. Implementations may use a time of 0 to clear. \\deprecated replaced by setHardwareTime() \\param device a pointer to a device instance \\param timeNs time in nanoseconds \\param what optional argument \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setDCOffset-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setDCOffset","text":"SoapySDRDevice_setDCOffset(device, direction, channel, offsetI, offsetQ)\n\nSet the frontend DC offset correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param offsetI the relative correction (1.0 max) \\param offsetQ the relative correction (1.0 max) \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setDCOffsetMode-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setDCOffsetMode","text":"SoapySDRDevice_setDCOffsetMode(device, direction, channel, automatic)\n\nSet the automatic DC offset corrections mode. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param automatic true for automatic offset correction \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setFrequency-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setFrequency","text":"SoapySDRDevice_setFrequency(device, direction, channel, frequency, args)\n\nSet the center frequency of the chain.\n\nFor RX, this specifies the down-conversion frequency.\nFor TX, this specifies the up-conversion frequency.\n\nThe default implementation of setFrequency() will tune the \"RF\" component as close as possible to the requested center frequency. Tuning inaccuracies will be compensated for with the \"BB\" component.\n\nThe args can be used to augment the tuning algorithm.\n\nUse \"OFFSET\" to specify an \"RF\" tuning offset, usually with the intention of moving the LO out of the passband. The offset will be compensated for using the \"BB\" component.\nUse the name of a component for the key and a frequency in Hz as the value (any format) to enforce a specific frequency. The other components will be tuned with compensation to achieve the specified overall frequency.\nUse the name of a component for the key and the value \"IGNORE\" so that the tuning algorithm will avoid altering the component.\nVendor specific implementations can also use the same args to augment tuning in other ways such as specifying fractional vs integer N tuning.\n\n\\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param frequency the center frequency in Hz \\param args optional tuner arguments \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setFrequencyComponent-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setFrequencyComponent","text":"SoapySDRDevice_setFrequencyComponent(device, direction, channel, name, frequency, args)\n\nTune the center frequency of the specified element.\n\nFor RX, this specifies the down-conversion frequency.\nFor TX, this specifies the up-conversion frequency.\n\nRecommended names used to represent tunable components:\n\n\"CORR\" - freq error correction in PPM\n\"RF\" - frequency of the RF frontend\n\"BB\" - frequency of the baseband DSP\n\n\\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of a tunable element \\param frequency the center frequency in Hz \\param args optional tuner arguments \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setFrequencyCorrection-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setFrequencyCorrection","text":"SoapySDRDevice_setFrequencyCorrection(device, direction, channel, value)\n\nFine tune the frontend frequency correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param value the correction in PPM \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setFrontendMapping-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setFrontendMapping","text":"SoapySDRDevice_setFrontendMapping(device, direction, mapping)\n\nSet the frontend mapping of available DSP units to RF frontends. This mapping controls channel mapping and channel availability. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param mapping a vendor-specific mapping string \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setGain-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setGain","text":"SoapySDRDevice_setGain(device, direction, channel, value)\n\nSet the overall amplification in a chain. The gain will be distributed automatically across available element. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param value the new amplification value in dB \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setGainElement-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setGainElement","text":"SoapySDRDevice_setGainElement(device, direction, channel, name, value)\n\nSet the value of a amplification element in a chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param name the name of an amplification element \\param value the new amplification value in dB \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setGainMode-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setGainMode","text":"SoapySDRDevice_setGainMode(device, direction, channel, automatic)\n\nSet the automatic gain mode on the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param automatic true for automatic gain setting \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setHardwareTime-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setHardwareTime","text":"SoapySDRDevice_setHardwareTime(device, timeNs, what)\n\nWrite the time to the hardware clock on the device. The what argument can refer to a specific time counter. \\param device a pointer to a device instance \\param timeNs time in nanoseconds \\param what optional argument \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setIQBalance-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setIQBalance","text":"SoapySDRDevice_setIQBalance(device, direction, channel, balanceI, balanceQ)\n\nSet the frontend IQ balance correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param balanceI the relative correction (1.0 max) \\param balanceQ the relative correction (1.0 max) \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setIQBalanceMode-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setIQBalanceMode","text":"SoapySDRDevice_setIQBalanceMode(device, direction, channel, automatic)\n\nSet the automatic frontend IQ balance correction. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param automatic true for automatic correction \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setMasterClockRate-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setMasterClockRate","text":"SoapySDRDevice_setMasterClockRate(device, rate)\n\nSet the master clock rate of the device. \\param device a pointer to a device instance \\param rate the clock rate in Hz \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setReferenceClockRate-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setReferenceClockRate","text":"SoapySDRDevice_setReferenceClockRate(device, rate)\n\nSet the reference clock rate of the device. \\param device a pointer to a device instance \\param rate the clock rate in Hz \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setSampleRate-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setSampleRate","text":"SoapySDRDevice_setSampleRate(device, direction, channel, rate)\n\nSet the baseband sample rate of the chain. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param rate the sample rate in samples per second \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setTimeSource-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setTimeSource","text":"SoapySDRDevice_setTimeSource(device, source)\n\nSet the time source on the device \\param device a pointer to a device instance \\param source the name of a time source \\return an error code or 0 for success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setupStream-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setupStream","text":"SoapySDRDevice_setupStream(device, direction, format, channels, numChans, args)\n\nInitialize a stream given a list of channels and stream arguments. The implementation may change switches or power-up components. All stream API calls should be usable with the new stream object after setupStream() is complete, regardless of the activity state.\n\nThe API allows any number of simultaneous TX and RX streams, but many dual-channel devices are limited to one stream in each direction, using either one or both channels. This call will return an error if an unsupported combination is requested, or if a requested channel in this direction is already in use by another stream.\n\nWhen multiple channels are added to a stream, they are typically expected to have the same sample rate. See SoapySDRDevice_setSampleRate().\n\n\\param device a pointer to a device instance \\return the opaque pointer to a stream handle. \\parblock\n\nThe returned stream is not required to have internal locking, and may not be used concurrently from multiple threads. \\endparblock\n\n\\param direction the channel direction (SOAPY_SDR_RX or SOAPY_SDR_TX) \\param format A string representing the desired buffer format in read/writeStream() \\parblock\n\nThe first character selects the number type:\n\n\"C\" means complex\n\"F\" means floating point\n\"S\" means signed integer\n\"U\" means unsigned integer\n\nThe type character is followed by the number of bits per number (complex is 2x this size per sample)\n\nExample format strings:\n\n\"CF32\" -  complex float32 (8 bytes per element)\n\"CS16\" -  complex int16 (4 bytes per element)\n\"CS12\" -  complex int12 (3 bytes per element)\n\"CS4\" -  complex int4 (1 byte per element)\n\"S32\" -  int32 (4 bytes per element)\n\"U8\" -  uint8 (1 byte per element)\n\n\\endparblock \\param channels a list of channels or empty for automatic \\param numChans the number of elements in the channels array \\param args stream args or empty for defaults \\parblock\n\nRecommended keys to use in the args dictionary:\n\n\"WIRE\" - format of the samples between device and host\n\n\\endparblock \\return the stream pointer or nullptr for failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_transactSPI-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_transactSPI","text":"SoapySDRDevice_transactSPI(device, addr, data, numBits)\n\nPerform a SPI transaction and return the result. Its up to the implementation to set the clock rate, and read edge, and the write edge of the SPI core. SPI slaves without a readback pin will return 0.\n\nIf the device contains multiple SPI masters, the address bits can encode which master.\n\n\\param device a pointer to a device instance \\param addr an address of an available SPI slave \\param data the SPI data, numBits-1 is first out \\param numBits the number of bits to clock out \\return the readback data, numBits-1 is first in\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_unmake-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_unmake","text":"SoapySDRDevice_unmake(device)\n\nUnmake or release a device object handle.\n\n\\param device a pointer to a device object \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_unmake_list-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_unmake_list","text":"SoapySDRDevice_unmake_list(devices, length)\n\nUnmake or release a list of device handles and free the devices array memory as well. This is a convenience call to parallelize device destruction, and is fundamentally a parallel for loop of unmake(Device *).\n\n\\param devices a list of pointers to device objects \\param length the length of the devices array \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeChannelSetting-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeChannelSetting","text":"SoapySDRDevice_writeChannelSetting(device, direction, channel, key, value)\n\nWrite an arbitrary channel setting on the device. The interpretation is up the implementation. \\param device a pointer to a device instance \\param direction the channel direction RX or TX \\param channel an available channel on the device \\param key the setting identifier \\param value the setting value \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeGPIO-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeGPIO","text":"SoapySDRDevice_writeGPIO(device, bank, value)\n\nWrite the value of a GPIO bank. \\param device a pointer to a device instance \\param bank the name of an available bank \\param value an integer representing GPIO bits \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeGPIODir-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeGPIODir","text":"SoapySDRDevice_writeGPIODir(device, bank, dir)\n\nWrite the data direction of a GPIO bank. 1 bits represent outputs, 0 bits represent inputs. \\param device a pointer to a device instance \\param bank the name of an available bank \\param dir an integer representing data direction bits \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeGPIODirMasked-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeGPIODirMasked","text":"SoapySDRDevice_writeGPIODirMasked(device, bank, dir, mask)\n\nWrite the data direction of a GPIO bank with modification mask. 1 bits represent outputs, 0 bits represent inputs. \\param device a pointer to a device instance \\param bank the name of an available bank \\param dir an integer representing data direction bits \\param mask a modification mask where 1 = modify \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeGPIOMasked-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeGPIOMasked","text":"SoapySDRDevice_writeGPIOMasked(device, bank, value, mask)\n\nWrite the value of a GPIO bank with modification mask. \\param device a pointer to a device instance \\param bank the name of an available bank \\param value an integer representing GPIO bits \\param mask a modification mask where 1 = modify \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeI2C-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeI2C","text":"SoapySDRDevice_writeI2C(device, addr, data, numBytes)\n\nWrite to an available I2C slave. If the device contains multiple I2C masters, the address bits can encode which master. \\param device a pointer to a device instance \\param addr the address of the slave \\param data an array of bytes write out \\param numBytes the number of bytes to write \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeRegister-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeRegister","text":"SoapySDRDevice_writeRegister(device, name, addr, value)\n\nWrite a register on the device given the interface name. This can represent a register on a soft CPU, FPGA, IC; the interpretation is up the implementation to decide. \\param device a pointer to a device instance \\param name the name of a available register interface \\param addr the register address \\param value the register value \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeRegisters-NTuple{5, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeRegisters","text":"SoapySDRDevice_writeRegisters(device, name, addr, value, length)\n\nWrite a memory block on the device given the interface name. This can represent a memory block on a soft CPU, FPGA, IC; the interpretation is up the implementation to decide. \\param device a pointer to a device instance \\param name the name of a available memory block interface \\param addr the memory block start address \\param value the memory block content \\param length the number of words in the block \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeSetting-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeSetting","text":"SoapySDRDevice_writeSetting(device, key, value)\n\nWrite an arbitrary setting on the device. The interpretation is up the implementation. \\param device a pointer to a device instance \\param key the setting identifier \\param value the setting value \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeStream-NTuple{7, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeStream","text":"SoapySDRDevice_writeStream(device, stream, buffs, numElems, flags, timeNs, timeoutUs)\n\nWrite elements to a stream for transmission. This is a multi-channel call, and buffs should be an array of void *, where each pointer will be filled with data for a different channel.\n\nClient code compatibility: Client code relies on writeStream() for proper back-pressure. The writeStream() implementation must enforce the timeout such that the call blocks until space becomes available or timeout expiration.\n\n\\param device a pointer to a device instance \\param stream the opaque pointer to a stream handle \\param buffs an array of void* buffers num chans in size \\param numElems the number of elements in each buffer \\param [in,out] flags optional input flags and output flags \\param timeNs the buffer's timestamp in nanoseconds \\param timeoutUs the timeout in microseconds \\return the number of elements written per buffer or error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeUART-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeUART","text":"SoapySDRDevice_writeUART(device, which, data)\n\nWrite data to a UART device. Its up to the implementation to set the baud rate, carriage return settings, flushing on newline. \\param device a pointer to a device instance \\param which the name of an available UART \\param data a null terminated array of bytes \\return 0 for success or error code on failure\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargsList_clear-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargsList_clear","text":"SoapySDRKwargsList_clear(args, length)\n\nClear a list of kwargs structures. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_clear-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_clear","text":"SoapySDRKwargs_clear(args)\n\nClear the contents of a kwargs structure. This frees all the underlying memory and clears the members.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_fromString-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_fromString","text":"SoapySDRKwargs_fromString(markup)\n\nConvert a markup string to a key-value map. The markup format is: \"key0=value0, key1=value1\"\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_get-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_get","text":"SoapySDRKwargs_get(args, key)\n\nGet a value given a key in a kwargs structure. \\return the string or NULL if not found\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_set-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_set","text":"SoapySDRKwargs_set(args, key, val)\n\nSet a key/value pair in a kwargs structure. \\post If the key exists, the existing entry will be modified; otherwise a new entry will be appended to args. On error, the elements of args will not be modified, and args is guaranteed to be in a good state. \\return 0 for success, otherwise allocation error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRKwargs_toString-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRKwargs_toString","text":"SoapySDRKwargs_toString(args)\n\nConvert a key-value map to a markup string. The markup format is: \"key0=value0, key1=value1\"\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRStrings_clear-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRStrings_clear","text":"SoapySDRStrings_clear(elems, length)\n\nClear the contents of a list of string Convenience call to deal with results that return a string list.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_errToStr-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_errToStr","text":"SoapySDR_errToStr(errorCode)\n\nConvert a error code to a string for printing purposes. If the error code is unrecognized, errToStr returns \"UNKNOWN\". \\param errorCode a negative integer return code \\return a pointer to a string representing the error\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_formatToSize-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_formatToSize","text":"SoapySDR_formatToSize(format)\n\nGet the size of a single element in the specified format. \\param format a supported format string \\return the size of an element in bytes\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_free-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_free","text":"SoapySDR_free(ptr)\n\nFree a pointer allocated by SoapySDR. For most platforms this is a simple call around free()\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getABIVersion-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_getABIVersion","text":"SoapySDR_getABIVersion()\n\nGet the ABI version string that the library was built against. A client can compare <b>SOAPYSDRABI_VERSION</b> to getABIVersion() to check for ABI incompatibility before using the library. If the values are not equal then the client code was compiled against a different ABI than the library.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getAPIVersion-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_getAPIVersion","text":"SoapySDR_getAPIVersion()\n\nGet the SoapySDR library API version as a string. The format of the version string is <b>major.minor.increment</b>, where the digits are taken directly from <b>SOAPYSDRAPI_VERSION</b>.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getLibVersion-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_getLibVersion","text":"SoapySDR_getLibVersion()\n\nGet the library version and build information string. The format of the version string is <b>major.minor.patch-buildInfo</b>. This function is commonly used to identify the software back-end to the user for command-line utilities and graphical applications.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getLoaderResult-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_getLoaderResult","text":"SoapySDR_getLoaderResult(path)\n\nList all registration loader errors for a given module path. The resulting dictionary contains all registry entry names provided by the specified module. The value of each entry is an error message string or empty on successful load. \\param path the path to a specific module file \\return a dictionary of registry names to error messages\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getModuleVersion-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_getModuleVersion","text":"SoapySDR_getModuleVersion(path)\n\nGet a version string for the specified module. Modules may optionally provide version strings. \\param path the path to a specific module file \\return a version string or empty if no version provided\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_getRootPath-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_getRootPath","text":"SoapySDR_getRootPath()\n\nQuery the root installation path\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_listModules-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_listModules","text":"SoapySDR_listModules(length)\n\nList all modules found in default path. The result is an array of strings owned by the caller. \\param [out] length the number of elements in the result. \\return a list of file paths to loadable modules\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_listModulesPath-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_listModulesPath","text":"SoapySDR_listModulesPath(path, length)\n\nList all modules found in the given path. The result is an array of strings owned by the caller. \\param path a directory on the system \\param [out] length the number of elements in the result. \\return a list of file paths to loadable modules\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_listSearchPaths-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_listSearchPaths","text":"SoapySDR_listSearchPaths(length)\n\nThe list of paths automatically searched by loadModules(). \\param [out] length the number of elements in the result. \\return a list of automatically searched file paths\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_loadModule-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_loadModule","text":"SoapySDR_loadModule(path)\n\nLoad a single module given its file system path. The caller must free the result error string. \\param path the path to a specific module file \\return an error message, empty on success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_loadModules-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_loadModules","text":"SoapySDR_loadModules()\n\nLoad the support modules installed on this system. This call will only actually perform the load once. Subsequent calls are a NOP.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_log-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_log","text":"SoapySDR_log(logLevel, message)\n\nSend a message to the registered logger. \\param logLevel a possible logging level \\param message a logger message string\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_registerLogHandler-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_registerLogHandler","text":"SoapySDR_registerLogHandler(handler)\n\nRegister a new system log handler. Platforms should call this to replace the default stdio handler. Passing NULL restores the default.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_setLogLevel-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_setLogLevel","text":"SoapySDR_setLogLevel(logLevel)\n\nSet the log level threshold. Log messages with lower priority are dropped.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_ticksToTimeNs-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_ticksToTimeNs","text":"SoapySDR_ticksToTimeNs(ticks, rate)\n\nConvert a tick count into a time in nanoseconds using the tick rate. \\param ticks a integer tick count \\param rate the ticks per second \\return the time in nanoseconds\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_timeNsToTicks-Tuple{Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_timeNsToTicks","text":"SoapySDR_timeNsToTicks(timeNs, rate)\n\nConvert a time in nanoseconds into a tick count using the tick rate. \\param timeNs time in nanoseconds \\param rate the ticks per second \\return the integer tick count\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_unloadModule-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDR_unloadModule","text":"SoapySDR_unloadModule(path)\n\nUnload a module that was loaded with loadModule(). The caller must free the result error string. \\param path the path to a specific module file \\return an error message, empty on success\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDR_unloadModules-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDR_unloadModules","text":"SoapySDR_unloadModules()\n\nUnload all currently loaded support modules.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoapySDR","category":"page"},{"location":"#SoapySDR","page":"Home","title":"SoapySDR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoapySDR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a Julia wrapper for the SoapySDR C++ library.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Transmitting-and-Receiving-(loopback)","page":"Home","title":"Transmitting and Receiving (loopback)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(joinpath(@__DIR__, \"../../examples/highlevel_loopback.jl\"), String))\n```\n\"\"\")","category":"page"},{"location":"#Release-Log","page":"Home","title":"Release Log","text":"","category":"section"},{"location":"#.2","page":"Home","title":"0.2","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This changes the high level API to allow device constructor arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In prior releases to construct a Device one would do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"devs = Devices()\ndev = devs[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now one has to explicitly call open to create the Device, which allows arguments to be set:","category":"page"},{"location":"","page":"Home","title":"Home","text":"devs = Devices()\ndevs[1][\"argument\"] = \"value\"\ndev = open(devs[1])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Similarly it is now possible to close a device.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\nYou have to load a driver for your particular SDR in order to work with SoapySDR. Available modules through the Julia Package manager are listed on the index.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The entry point of this package is the Devices() object, which will list all devices known to SoapySDR on the current system. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will use XTRX:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using SoapySDR, xtrx_jll\n\njulia> Devices()\n[1] :addr => \"pcie:///dev/xtrx0\", :dev => \"pcie:///dev/xtrx0\", :driver => \"xtrx\", :label => \"XTRX: pcie:///dev/xtrx0 (10Gbit)\", :media => \"PCIe\", :module => \"SoapyXTRX\", :name => \"XTRX\", :serial => \"\", :type => \"xtrx\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Devices may be selected just by indexing:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device = Devices()[1]\nSoapySDR xtrxdev device (driver: xtrxsoapy) w/ 2 TX channels and 2 RX channels","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The channels on the device are then available on the resulting object","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device.tx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Tx, 0)\n Channel(xtrxdev, Tx, 1)\n\njulia> device.rx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Rx, 0)\n Channel(xtrxdev, Rx, 1)\n\njulia> device.tx[1]\nTX Channel #1 on xtrxdev\n  Selected Antenna [TXH, TXW]: TXW\n  Bandwidth [ 800 kHz .. 16 MHz, 28..60 MHz ]: 0.0 Hz\n  Frequency [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    RF [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    BB [ -00..00 Hz ]: 0.0 Hz\n  Gain [0.0 dB .. 52.0 dB]: 0.0 dB\n    PAD [0.0 dB .. 52.0 dB]: 0.0 dB\n  Sample Rate [ 2.1..56.2 MHz, 61.4..80 MHz ]: 0.0 Hz\n  DC offset correction: (0.0, 0.0)\n  IQ balance correction: (0.0, 0.0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To send or receive data, start a stream on a particular channel:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> stream = SDRStream(ComplexF32, [device.rx[1]])\nStream on xtrxdev","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These may then be accessed using standard IO functions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> SoapySDR.activate!(stream)\n\njulia> Base.read(stream, 10_000)","category":"page"}]
}

var documenterSearchIndex = {"docs":
[{"location":"drivers/#Loading-Drivers","page":"Loading Drivers","title":"Loading Drivers","text":"","category":"section"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"Below is a list of driver modules that may be installed with the Julia package manager.","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"Device Julia Package\nxrtx xtrx_jll\nRTL-SDR SoapyRTLSDR_jll\nLimeSDR SoapyLMS7_jll\nUSRP SoapyUHD_jll\nPluto SDR SoapyPlutoSDR_jll","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"If you need a driver module that is not listed, you can search JuliaHub to see if it may have been added to the package manager. If not, please file an issue. Alternatively, you can see the instructions below about using operating system provided modules with SoapySDR.jl.","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"To activate the driver and module, simply use the package along with SoapySDR. For example:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"julia> using SoapySDR, xtrx_jll","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"or:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"julia> using SoapySDR, SoapyRTLSDR_jll","category":"page"},{"location":"drivers/#Loading-System-Provided-Driver-Modules","page":"Loading Drivers","title":"Loading System-Provided Driver Modules","text":"","category":"section"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"The SOAPY_SDR_PLUGIN_PATH environmental variable is read by SoapySDR to load local driver modules. For example, on Ubuntu one may use the Ubuntu package manager to install all SoapySDR driver modules:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"sudo apt install soapysdr0.8-module-all ","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"These can then be used from SoapySDR.jl by exporting the environmental variable with the module directory:","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"export SOAPY_SDR_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/SoapySDR/modules0.8/","category":"page"},{"location":"drivers/","page":"Loading Drivers","title":"Loading Drivers","text":"This can add support for more devices than is provided by the Julia package manager, however compatibility is not guaranteed.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Below are some common issues and how to resolve them. If you don't find the issue listed here, please file an issue. We are always looking to help identify and fix bugs.","category":"page"},{"location":"troubleshooting/#No-Devices-Found","page":"Troubleshooting","title":"No Devices Found","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"You may see:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia> Devices()\nNo devices available! Make sure a supported SDR module is included.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have included a module driver from the module list.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If this doesn't work, and you are on Linux, please see the udev section below.","category":"page"},{"location":"troubleshooting/#Linux-Troubleshooting","page":"Troubleshooting","title":"Linux Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Udev-Rules","page":"Troubleshooting","title":"Udev Rules","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Udev rules should be copied into /etc/udev/rules.d/.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Udev rules for some common devices are linked below:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"RTL-SDR\nUSRP\nLimeSDR\nADALM-Pluto","category":"page"},{"location":"troubleshooting/#Blacklisting-Kernel-Modules","page":"Troubleshooting","title":"Blacklisting Kernel Modules","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For some devices such as the RTL-SDR, a kernel module may need to be blacklisted in order to use the user space driver. Typically the library will warn is this is required. Please check you distribution instructions for how to do this.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"RTL-SDR module name: dvb_usb_rtl28xxu","category":"page"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"highlevel/#SoapySDR-High-Level-API","page":"High Level API","title":"SoapySDR High Level API","text":"","category":"section"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"Modules = [SoapySDR]\nPages = [\"highlevel.jl\",\n         \"loghandler.jl\"]","category":"page"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"lowlevel/#SoapySDR-Low-Level-API","page":"Low Level API","title":"SoapySDR Low Level API","text":"","category":"section"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"warning: Warning\nThis documentation is part of the low level libsoapysdr interface. These bindings and documentation are autogenerated and reflect the complete SoapySDR C API. For end-users, the high-level Julia APIs are preferred.","category":"page"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"Modules = [SoapySDR]\nPages = [\"lowlevel/auto_wrap.jl\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoapySDR","category":"page"},{"location":"#SoapySDR","page":"Home","title":"SoapySDR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoapySDR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a Julia wrapper for the SoapySDR C++ library.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Transmitting-and-Receiving-(loopback)","page":"Home","title":"Transmitting and Receiving (loopback)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(joinpath(@__DIR__, \"../../examples/highlevel_loopback.jl\"), String))\n```\n\"\"\")","category":"page"},{"location":"#Release-Log","page":"Home","title":"Release Log","text":"","category":"section"},{"location":"#.2","page":"Home","title":"0.2","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This changes the high level API to allow device constructor arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In prior releases to construct a Device one would do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"devs = Devices()\ndev = devs[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now one has to explicitly call open to create the Device, which allows arguments to be set:","category":"page"},{"location":"","page":"Home","title":"Home","text":"devs = Devices()\ndevs[1][\"argument\"] = \"value\"\ndev = open(devs[1])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Similarly it is now possible to close a device.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\nYou have to load a driver for your particular SDR in order to work with SoapySDR. Available modules through the Julia Package manager are listed on the index.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The entry point of this package is the Devices() object, which will list all devices known to SoapySDR on the current system. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will use XTRX:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using SoapySDR, xtrx_jll\n\njulia> Devices()\n[1] :addr => \"pcie:///dev/xtrx0\", :dev => \"pcie:///dev/xtrx0\", :driver => \"xtrx\", :label => \"XTRX: pcie:///dev/xtrx0 (10Gbit)\", :media => \"PCIe\", :module => \"SoapyXTRX\", :name => \"XTRX\", :serial => \"\", :type => \"xtrx\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Devices may be selected just by indexing and constructing the Device:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device = SoapySDR.Device(Devices()[1])\nSoapySDR xtrxdev device (driver: xtrxsoapy) w/ 2 TX channels and 2 RX channels","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The channels on the device are then available on the resulting object","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device.tx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Tx, 0)\n Channel(xtrxdev, Tx, 1)\n\njulia> device.rx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Rx, 0)\n Channel(xtrxdev, Rx, 1)\n\njulia> device.tx[1]\nTX Channel #1 on xtrxdev\n  Selected Antenna [TXH, TXW]: TXW\n  Bandwidth [ 800 kHz .. 16 MHz, 28..60 MHz ]: 0.0 Hz\n  Frequency [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    RF [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    BB [ -00..00 Hz ]: 0.0 Hz\n  Gain [0.0 dB .. 52.0 dB]: 0.0 dB\n    PAD [0.0 dB .. 52.0 dB]: 0.0 dB\n  Sample Rate [ 2.1..56.2 MHz, 61.4..80 MHz ]: 0.0 Hz\n  DC offset correction: (0.0, 0.0)\n  IQ balance correction: (0.0, 0.0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To send or receive data, start a stream on a particular channel:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> stream = SDRStream(ComplexF32, [device.rx[1]])\nStream on xtrxdev","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These may then be accessed using standard IO functions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> SoapySDR.activate!(stream)\n\njulia> Base.read(stream, 10_000)","category":"page"}]
}

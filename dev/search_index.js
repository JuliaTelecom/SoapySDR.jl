var documenterSearchIndex = {"docs":
[{"location":"quickstart/#QuickStart","page":"Quick Start","title":"QuickStart","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"note: Note\nYou have to load a driver for your particular SDR in order to work with SoapySDR. Available modules through the Julia Package manager are listed on the driver modules page.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"TX:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Open first TX-capable channel on first device\nchannel = Devices()[1].tx[1]\n\n# Configure channel with appropriate parameters\nchannel.bandwidth = 800u\"kHz\"\nchannel.frequency = 30u\"MHz\"\nchannel.gain = 42u\"dB\"\nchannel.sample_rate = 2.1u\"MHz\"\n\n# Open a (potentially multichannel) stream on this channel\nstream = SoapySDR.Stream(ComplexF32, [channel])\nSoapySDR.activate!(stream)\n\n# Write out random noise\nBase.write(stream, (randn(ComplexF32, 10000),))","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"RX:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Open first RX-capable channel on first device\nchannel = Devices()[1].tx[1]\n\n# Configure channel with appropriate parameters\nchannel.bandwidth = 800u\"kHz\"\nchannel.frequency = 30u\"MHz\"\nchannel.gain = 42u\"dB\"\nchannel.sample_rate = 2.1u\"MHz\"\n\n# Open a (potentially multichannel) stream on this channel\nstream = SoapySDR.Stream(ComplexF32, [channel])\nSoapySDR.activate!(stream)\n\n# Collect data\nBase.read(stream, 10000)","category":"page"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"highlevel/#SoapySDR-High-Level-API","page":"High Level API","title":"SoapySDR High Level API","text":"","category":"section"},{"location":"highlevel/","page":"High Level API","title":"High Level API","text":"Modules = [SoapySDR]\nPages = [\"highlevel.jl\"]","category":"page"},{"location":"highlevel/#SoapySDR.Devices","page":"High Level API","title":"SoapySDR.Devices","text":"Devices()\n\nEnumerates all detectable SDR devices on the system.\n\n\n\n\n\n","category":"type"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"CurrentModule = SoapySDR","category":"page"},{"location":"lowlevel/#SoapySDR-Low-Level-API","page":"Low Level API","title":"SoapySDR Low Level API","text":"","category":"section"},{"location":"lowlevel/","page":"Low Level API","title":"Low Level API","text":"Modules = [SoapySDR]\nPages = [\"lowlevel/constants.jl\",\n         \"lowlevel/Device.jl\",\n         \"lowlevel/Errors.jl\",\n         \"lowlevel/Formats.jl\",\n         \"lowlevel/Types.jl\"]","category":"page"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getChannelInfo-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getChannelInfo","text":"SoapySDRDevice_getChannelInfo(device, direction, channel)\n\nGet channel info given the streaming direction\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns channel information\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRange","text":"Get the range of overall frequency values.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of frequency ranges in Hz\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getFrequencyRangeComponent-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getFrequencyRangeComponent","text":"Get the range of tunable values for the specified element.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of frequency ranges in Hz\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainElementRange-NTuple{4, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainElementRange","text":"SoapySDRDevice_getGainElementRange(device, direction, channel, name)\n\nGet the range of possible gain values for a specific element.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\nname the name of an amplification element\n\nReturns the range of possible gain values for the specified amplification element in dB\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getGainRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getGainRange","text":"Get the overall range of possible gain values\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns the range of possible gain values for this channel in dB\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getSampleRateRange-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getSampleRateRange","text":"Get the range of possible baseband sample rates.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of samples rates in samples per second\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_getStreamFormats-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_getStreamFormats","text":"Query a list of the available stream formats.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of allowed format strings.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_lastStatus-Tuple{}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_lastStatus","text":"SoapySDRDevice_lastStatus()\n\nGet the last status code after a Device API call. The status code is cleared on entry to each Device call. When an device API call throws, the C bindings catch the exception, and set a non-zero last status code. Use lastStatus() to determine success/failure for Device calls without integer status return codes.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listAntennas-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listAntennas","text":"Get a list of available antennas to select on a given chain.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nreturns a list of available antenna names\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_listFrequencies-Tuple{Any, Any, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_listFrequencies","text":"List available tunable elements in the chain. Elements should be in order RF to baseband.\n\ndevice a pointer to a device instance\ndirection the channel direction RX or TX\nchannel the channel number to get info for\n\nReturns a list of tunable elements by name\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n*/\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_make-Tuple{Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_make","text":"SoapySDRDevice_make(args)\n\nMake a new Device object given device construction args. The device pointer will be stored in a table so subsequent calls with the same arguments will produce the same device. For every call to make, there should be a matched call to unmake. param args device construction key/value argument map return a pointer to a new Device object.\n\nNOTE: This function is part of the lowlevel libsoapysdr interface. For end-users in Julia, the higher-level Julia APIs are preferred\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_setupStream-NTuple{6, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_setupStream","text":"Initialize a stream given a list of channels and stream arguments. The implementation may change switches or power-up components. All stream API calls should be usable with the new stream object after setupStream() is complete, regardless of the activity state.\n\nThe API allows any number of simultaneous TX and RX streams, but many dual-channel devices are limited to one stream in each direction, using either one or both channels. This call will return an error if an unsupported combination is requested, or if a requested channel in this direction is already in use by another stream.\n\nWhen multiple channels are added to a stream, they are typically expected to have the same sample rate. See SoapySDRDevice_setSampleRate().\n\ndevice a pointer to a device instance\ndirection the channel direction (SOAPY_SDR_RX or SOAPY_SDR_TX)\nformat A string representing the desired buffer format in read/writeStream()\n\nThe first character selects the number type:\n\n\"C\" means complex\n\"F\" means floating point\n\"S\" means signed integer\n\"U\" means unsigned integer\n\nThe type character is followed by the number of bits per number (complex is 2x this size per sample)\n\nExample format strings:\n\n\"CF32\" -  complex float32 (8 bytes per element)\n\"CS16\" -  complex int16 (4 bytes per element)\n\"CS12\" -  complex int12 (3 bytes per element)\n\"CS4\" -  complex int4 (1 byte per element)\n\"S32\" -  int32 (4 bytes per element)\n\"U8\" -  uint8 (1 byte per element)\nchannels a list of channels or empty for automatic\nnumChans the number of elements in the channels array\nargs stream args or empty for defaults\n\nRecommended keys to use in the args dictionary:     - \"WIRE\" - format of the samples between device and host\n\nReturns the opaque pointer to a stream handle.\n\nNOTE:\n\nThe returned stream is not required to have internal locking, and may not be used\nconcurrently from multiple threads.\n\n\n\n\n\n","category":"method"},{"location":"lowlevel/#SoapySDR.SoapySDRDevice_writeStream-NTuple{7, Any}","page":"Low Level API","title":"SoapySDR.SoapySDRDevice_writeStream","text":"Write elements to a stream for transmission. This is a multi-channel call, and buffs should be an array of void *, where each pointer will be filled with data for a different channel.\n\nClient code compatibility: Client code relies on writeStream() for proper back-pressure. The writeStream() implementation must enforce the timeout such that the call blocks until space becomes available or timeout expiration.\n\ndevice a pointer to a device instance\nstream the opaque pointer to a stream handle\nbuffs an array of void* buffers num chans in size\nnumElems the number of elements in each buffer\nflags optional input flags and output flags\ntimeNs the buffer's timestamp in nanoseconds\ntimeoutUs the timeout in microseconds\n\nReturns the number of elements written per buffer, output flags\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoapySDR","category":"page"},{"location":"#SoapySDR","page":"Home","title":"SoapySDR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoapySDR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"drivermodules/#Driver-Modules","page":"Driver Modules","title":"Driver Modules","text":"","category":"section"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"Below is a list of driver modules that may be installed with the Julia package manager.","category":"page"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"Device Julia Package\nxrtx xtrx_jll\nRTL-SDR soapyrtlsdr_jll","category":"page"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"To activate the driver and module, simply use the package along with SoapySDR. For example:","category":"page"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"julia> using SoapySDR, xtrx_jll","category":"page"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"or:","category":"page"},{"location":"drivermodules/","page":"Driver Modules","title":"Driver Modules","text":"julia> using SoapySDR, soapyrtlsdr_jll","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\nYou have to load a driver for your particular SDR in order to work with SoapySDR. Available modules through the Julia Package manager are listed on the driver modules page.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The entry point of this package is the Devices() object, which will list all devices known to SoapySDR on the current system. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will use XTRX:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using SoapySDR, xtrx_jll\n\njulia> Devices()\n[1] :addr => \"pcie:///dev/xtrx0\", :dev => \"pcie:///dev/xtrx0\", :driver => \"xtrx\", :label => \"XTRX: pcie:///dev/xtrx0 (10Gbit)\", :media => \"PCIe\", :module => \"SoapyXTRX\", :name => \"XTRX\", :serial => \"\", :type => \"xtrx\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Devices may be selected just by indexing:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device = Devices()[1]\n21:11:54.675118 DEBUG:  xtrxllpciev0_discovery:264 [PCIE] pcie: Found `pcie:///dev/xtrx0`\n21:11:54.688916 DEBUG:  xtrxllpciev0_discovery:264 [PCIE] pcie: Found `pcie:///dev/xtrx0`\n[INFO] Make connection: 'pcie:///dev/xtrx0'\n21:11:54.688990 INFO:   [XTRX] xtrx_open(): dev[0]='pcie:///dev/xtrx0'\n21:11:54.689031 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000300\n21:11:54.706207 INFO:   [CTRL] PCI:/dev/xtrx0: XTRX Rev4 (04000113)\n21:11:54.706246 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA STOP MIMO @0.0\n21:11:54.706251 INFO:   [PCIE] PCI:/dev/xtrx0: Device `pcie:///dev/xtrx0` has been opened successfully\nCPU Features: SSE2+ SSE4.1+ AVX+ FMA+\n21:11:54.820272 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000304\n21:11:54.920458 INFO:   [CTRL] PCI:/dev/xtrx0: FPGA V_GPIO set to 3280mV\n21:11:54.920509 INFO:   [CTRL] PCI:/dev/xtrx0: LMS PMIC DCDC out set to VA18=1880mV VA14=1480mV VA12=1340mV\n21:11:54.924038 INFO:   [CTRL] PCI:/dev/xtrx0: FPGA V_IO set to 1800mV\n21:11:54.934544 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x000306\n21:11:54.945459 INFO:   [LSM7] PCI:/dev/xtrx0: LMS VER:7 REV:1 MASK:1 (3841)\n21:11:54.945515 INFO:   [CTRL] PCI:/dev/xtrx0: RFIC_GPIO 0x00031e\n[INFO] Created: `pcie:///dev/xtrx0`\nSoapySDR xtrxdev device (driver: xtrxsoapy) w/ 2 TX channels and 2 RX channels","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The channels on the device are then available on the resulting object","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> device.tx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Tx, 0)\n Channel(xtrxdev, Tx, 1)\n\njulia> device.rx\n2-element SoapySDR.ChannelList:\n Channel(xtrxdev, Rx, 0)\n Channel(xtrxdev, Rx, 1)\n\njulia> device.tx[1]\nTX Channel #1 on xtrxdev\n  Selected Antenna [TXH, TXW]: TXW\n  Bandwidth [ 800 kHz .. 16 MHz, 28..60 MHz ]: 0.0 Hz\n  Frequency [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    RF [ 30 MHz .. 3.8 GHz ]: 0.0 Hz\n    BB [ -00..00 Hz ]: 0.0 Hz\n  Gain [0.0 dB .. 52.0 dB]: 0.0 dB\n    PAD [0.0 dB .. 52.0 dB]: 0.0 dB\n  Sample Rate [ 2.1..56.2 MHz, 61.4..80 MHz ]: 0.0 Hz\n  DC offset correction: (0.0, 0.0)\n  IQ balance correction: (0.0, 0.0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To send or receive data, start a stream on a particular channel:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> stream = SDRStream(ComplexF32, [device.rx[1]])\n21:15:44.166249 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA SKIP MIMO @0.0\n21:15:44.166307 INFO:   [LSM7] PCI:/dev/xtrx0: 0x0124[00, 00]\n21:15:44.166759 INFO:   [BPCI] PCI:/dev/xtrx0: RX DMA STOP MIMO (BLK:0 TS:0); TX DMA SKIP MIMO @0.0\n21:15:44.166769 INFO:   [LMSF] PCI:/dev/xtrx0: Auto RX band selection: LNAL\n21:15:44.166772 INFO:   [LMSF] PCI:/dev/xtrx0: Set RX band to 2 (L)\n21:15:44.166971 INFO:   [CTRL] PCI:/dev/xtrx0: RX_ANT: 1 TX_ANT: 0\n21:15:44.166973 INFO:   [LMSF] PCI:/dev/xtrx0: DC START\n21:15:44.167022 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167039 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167056 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167099 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167116 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167147 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167187 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167206 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167236 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167268 INFO:   [LSM7] PCI:/dev/xtrx0:  5c1=0000\n21:15:44.167335 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[0]=0000\n21:15:44.167416 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[1]=0000\n21:15:44.167506 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[2]=0000\n21:15:44.167573 INFO:   [LSM7] PCI:/dev/xtrx0:  TX[3]=0000\n21:15:44.167621 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[0]=0000\n21:15:44.167671 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[1]=0000\n21:15:44.167719 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[2]=0000\n21:15:44.167777 INFO:   [LSM7] PCI:/dev/xtrx0:  RX[3]=0000\nStream on xtrxdev","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These may then be accessed using standard IO functions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> SoapySDR.activate!(stream)\n\njulia> Base.read(stream, 10_000)","category":"page"}]
}
